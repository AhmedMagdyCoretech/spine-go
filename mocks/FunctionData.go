// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// FunctionData is an autogenerated mock type for the FunctionData type
type FunctionData struct {
	mock.Mock
}

type FunctionData_Expecter struct {
	mock *mock.Mock
}

func (_m *FunctionData) EXPECT() *FunctionData_Expecter {
	return &FunctionData_Expecter{mock: &_m.Mock}
}

// DataCopyAny provides a mock function with given fields:
func (_m *FunctionData) DataCopyAny() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataCopyAny")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FunctionData_DataCopyAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataCopyAny'
type FunctionData_DataCopyAny_Call struct {
	*mock.Call
}

// DataCopyAny is a helper method to define mock.On call
func (_e *FunctionData_Expecter) DataCopyAny() *FunctionData_DataCopyAny_Call {
	return &FunctionData_DataCopyAny_Call{Call: _e.mock.On("DataCopyAny")}
}

func (_c *FunctionData_DataCopyAny_Call) Run(run func()) *FunctionData_DataCopyAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FunctionData_DataCopyAny_Call) Return(_a0 interface{}) *FunctionData_DataCopyAny_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionData_DataCopyAny_Call) RunAndReturn(run func() interface{}) *FunctionData_DataCopyAny_Call {
	_c.Call.Return(run)
	return _c
}

// Function provides a mock function with given fields:
func (_m *FunctionData) Function() model.FunctionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Function")
	}

	var r0 model.FunctionType
	if rf, ok := ret.Get(0).(func() model.FunctionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FunctionType)
	}

	return r0
}

// FunctionData_Function_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Function'
type FunctionData_Function_Call struct {
	*mock.Call
}

// Function is a helper method to define mock.On call
func (_e *FunctionData_Expecter) Function() *FunctionData_Function_Call {
	return &FunctionData_Function_Call{Call: _e.mock.On("Function")}
}

func (_c *FunctionData_Function_Call) Run(run func()) *FunctionData_Function_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FunctionData_Function_Call) Return(_a0 model.FunctionType) *FunctionData_Function_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionData_Function_Call) RunAndReturn(run func() model.FunctionType) *FunctionData_Function_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataAny provides a mock function with given fields: data, filterPartial, filterDelete
func (_m *FunctionData) UpdateDataAny(data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType) {
	_m.Called(data, filterPartial, filterDelete)
}

// FunctionData_UpdateDataAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataAny'
type FunctionData_UpdateDataAny_Call struct {
	*mock.Call
}

// UpdateDataAny is a helper method to define mock.On call
//   - data interface{}
//   - filterPartial *model.FilterType
//   - filterDelete *model.FilterType
func (_e *FunctionData_Expecter) UpdateDataAny(data interface{}, filterPartial interface{}, filterDelete interface{}) *FunctionData_UpdateDataAny_Call {
	return &FunctionData_UpdateDataAny_Call{Call: _e.mock.On("UpdateDataAny", data, filterPartial, filterDelete)}
}

func (_c *FunctionData_UpdateDataAny_Call) Run(run func(data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType)) *FunctionData_UpdateDataAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(*model.FilterType), args[2].(*model.FilterType))
	})
	return _c
}

func (_c *FunctionData_UpdateDataAny_Call) Return() *FunctionData_UpdateDataAny_Call {
	_c.Call.Return()
	return _c
}

func (_c *FunctionData_UpdateDataAny_Call) RunAndReturn(run func(interface{}, *model.FilterType, *model.FilterType)) *FunctionData_UpdateDataAny_Call {
	_c.Call.Return(run)
	return _c
}

// NewFunctionData creates a new instance of FunctionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFunctionData(t interface {
	mock.TestingT
	Cleanup(func())
}) *FunctionData {
	mock := &FunctionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

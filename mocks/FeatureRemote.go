// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// FeatureRemote is an autogenerated mock type for the FeatureRemote type
type FeatureRemote struct {
	mock.Mock
}

type FeatureRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *FeatureRemote) EXPECT() *FeatureRemote_Expecter {
	return &FeatureRemote_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *FeatureRemote) Address() *model.FeatureAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.FeatureAddressType
	if rf, ok := ret.Get(0).(func() *model.FeatureAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FeatureAddressType)
		}
	}

	return r0
}

// FeatureRemote_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type FeatureRemote_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Address() *FeatureRemote_Address_Call {
	return &FeatureRemote_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *FeatureRemote_Address_Call) Run(run func()) *FeatureRemote_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Address_Call) Return(_a0 *model.FeatureAddressType) *FeatureRemote_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Address_Call) RunAndReturn(run func() *model.FeatureAddressType) *FeatureRemote_Address_Call {
	_c.Call.Return(run)
	return _c
}

// DataCopy provides a mock function with given fields: function
func (_m *FeatureRemote) DataCopy(function model.FunctionType) interface{} {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for DataCopy")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(model.FunctionType) interface{}); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FeatureRemote_DataCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataCopy'
type FeatureRemote_DataCopy_Call struct {
	*mock.Call
}

// DataCopy is a helper method to define mock.On call
//   - function model.FunctionType
func (_e *FeatureRemote_Expecter) DataCopy(function interface{}) *FeatureRemote_DataCopy_Call {
	return &FeatureRemote_DataCopy_Call{Call: _e.mock.On("DataCopy", function)}
}

func (_c *FeatureRemote_DataCopy_Call) Run(run func(function model.FunctionType)) *FeatureRemote_DataCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType))
	})
	return _c
}

func (_c *FeatureRemote_DataCopy_Call) Return(_a0 interface{}) *FeatureRemote_DataCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_DataCopy_Call) RunAndReturn(run func(model.FunctionType) interface{}) *FeatureRemote_DataCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *FeatureRemote) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// FeatureRemote_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type FeatureRemote_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Description() *FeatureRemote_Description_Call {
	return &FeatureRemote_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *FeatureRemote_Description_Call) Run(run func()) *FeatureRemote_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Description_Call) Return(_a0 *model.DescriptionType) *FeatureRemote_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Description_Call) RunAndReturn(run func() *model.DescriptionType) *FeatureRemote_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *FeatureRemote) Device() api.DeviceRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 api.DeviceRemote
	if rf, ok := ret.Get(0).(func() api.DeviceRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceRemote)
		}
	}

	return r0
}

// FeatureRemote_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type FeatureRemote_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Device() *FeatureRemote_Device_Call {
	return &FeatureRemote_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *FeatureRemote_Device_Call) Run(run func()) *FeatureRemote_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Device_Call) Return(_a0 api.DeviceRemote) *FeatureRemote_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Device_Call) RunAndReturn(run func() api.DeviceRemote) *FeatureRemote_Device_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields:
func (_m *FeatureRemote) Entity() api.EntityRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 api.EntityRemote
	if rf, ok := ret.Get(0).(func() api.EntityRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityRemote)
		}
	}

	return r0
}

// FeatureRemote_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type FeatureRemote_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Entity() *FeatureRemote_Entity_Call {
	return &FeatureRemote_Entity_Call{Call: _e.mock.On("Entity")}
}

func (_c *FeatureRemote_Entity_Call) Run(run func()) *FeatureRemote_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Entity_Call) Return(_a0 api.EntityRemote) *FeatureRemote_Entity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Entity_Call) RunAndReturn(run func() api.EntityRemote) *FeatureRemote_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// MaxResponseDelayDuration provides a mock function with given fields:
func (_m *FeatureRemote) MaxResponseDelayDuration() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxResponseDelayDuration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// FeatureRemote_MaxResponseDelayDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxResponseDelayDuration'
type FeatureRemote_MaxResponseDelayDuration_Call struct {
	*mock.Call
}

// MaxResponseDelayDuration is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) MaxResponseDelayDuration() *FeatureRemote_MaxResponseDelayDuration_Call {
	return &FeatureRemote_MaxResponseDelayDuration_Call{Call: _e.mock.On("MaxResponseDelayDuration")}
}

func (_c *FeatureRemote_MaxResponseDelayDuration_Call) Run(run func()) *FeatureRemote_MaxResponseDelayDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_MaxResponseDelayDuration_Call) Return(_a0 time.Duration) *FeatureRemote_MaxResponseDelayDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_MaxResponseDelayDuration_Call) RunAndReturn(run func() time.Duration) *FeatureRemote_MaxResponseDelayDuration_Call {
	_c.Call.Return(run)
	return _c
}

// Operations provides a mock function with given fields:
func (_m *FeatureRemote) Operations() map[model.FunctionType]api.Operations {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operations")
	}

	var r0 map[model.FunctionType]api.Operations
	if rf, ok := ret.Get(0).(func() map[model.FunctionType]api.Operations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.FunctionType]api.Operations)
		}
	}

	return r0
}

// FeatureRemote_Operations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operations'
type FeatureRemote_Operations_Call struct {
	*mock.Call
}

// Operations is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Operations() *FeatureRemote_Operations_Call {
	return &FeatureRemote_Operations_Call{Call: _e.mock.On("Operations")}
}

func (_c *FeatureRemote_Operations_Call) Run(run func()) *FeatureRemote_Operations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Operations_Call) Return(_a0 map[model.FunctionType]api.Operations) *FeatureRemote_Operations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Operations_Call) RunAndReturn(run func() map[model.FunctionType]api.Operations) *FeatureRemote_Operations_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *FeatureRemote) Role() model.RoleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 model.RoleType
	if rf, ok := ret.Get(0).(func() model.RoleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RoleType)
	}

	return r0
}

// FeatureRemote_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type FeatureRemote_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Role() *FeatureRemote_Role_Call {
	return &FeatureRemote_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *FeatureRemote_Role_Call) Run(run func()) *FeatureRemote_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Role_Call) Return(_a0 model.RoleType) *FeatureRemote_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Role_Call) RunAndReturn(run func() model.RoleType) *FeatureRemote_Role_Call {
	_c.Call.Return(run)
	return _c
}

// Sender provides a mock function with given fields:
func (_m *FeatureRemote) Sender() api.Sender {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sender")
	}

	var r0 api.Sender
	if rf, ok := ret.Get(0).(func() api.Sender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Sender)
		}
	}

	return r0
}

// FeatureRemote_Sender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sender'
type FeatureRemote_Sender_Call struct {
	*mock.Call
}

// Sender is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Sender() *FeatureRemote_Sender_Call {
	return &FeatureRemote_Sender_Call{Call: _e.mock.On("Sender")}
}

func (_c *FeatureRemote_Sender_Call) Run(run func()) *FeatureRemote_Sender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Sender_Call) Return(_a0 api.Sender) *FeatureRemote_Sender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Sender_Call) RunAndReturn(run func() api.Sender) *FeatureRemote_Sender_Call {
	_c.Call.Return(run)
	return _c
}

// SetData provides a mock function with given fields: function, data
func (_m *FeatureRemote) SetData(function model.FunctionType, data interface{}) {
	_m.Called(function, data)
}

// FeatureRemote_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type FeatureRemote_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - function model.FunctionType
//   - data interface{}
func (_e *FeatureRemote_Expecter) SetData(function interface{}, data interface{}) *FeatureRemote_SetData_Call {
	return &FeatureRemote_SetData_Call{Call: _e.mock.On("SetData", function, data)}
}

func (_c *FeatureRemote_SetData_Call) Run(run func(function model.FunctionType, data interface{})) *FeatureRemote_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}))
	})
	return _c
}

func (_c *FeatureRemote_SetData_Call) Return() *FeatureRemote_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_SetData_Call) RunAndReturn(run func(model.FunctionType, interface{})) *FeatureRemote_SetData_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: desc
func (_m *FeatureRemote) SetDescription(desc *model.DescriptionType) {
	_m.Called(desc)
}

// FeatureRemote_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type FeatureRemote_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - desc *model.DescriptionType
func (_e *FeatureRemote_Expecter) SetDescription(desc interface{}) *FeatureRemote_SetDescription_Call {
	return &FeatureRemote_SetDescription_Call{Call: _e.mock.On("SetDescription", desc)}
}

func (_c *FeatureRemote_SetDescription_Call) Run(run func(desc *model.DescriptionType)) *FeatureRemote_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *FeatureRemote_SetDescription_Call) Return() *FeatureRemote_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *FeatureRemote_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescriptionString provides a mock function with given fields: s
func (_m *FeatureRemote) SetDescriptionString(s string) {
	_m.Called(s)
}

// FeatureRemote_SetDescriptionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescriptionString'
type FeatureRemote_SetDescriptionString_Call struct {
	*mock.Call
}

// SetDescriptionString is a helper method to define mock.On call
//   - s string
func (_e *FeatureRemote_Expecter) SetDescriptionString(s interface{}) *FeatureRemote_SetDescriptionString_Call {
	return &FeatureRemote_SetDescriptionString_Call{Call: _e.mock.On("SetDescriptionString", s)}
}

func (_c *FeatureRemote_SetDescriptionString_Call) Run(run func(s string)) *FeatureRemote_SetDescriptionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeatureRemote_SetDescriptionString_Call) Return() *FeatureRemote_SetDescriptionString_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_SetDescriptionString_Call) RunAndReturn(run func(string)) *FeatureRemote_SetDescriptionString_Call {
	_c.Call.Return(run)
	return _c
}

// SetMaxResponseDelay provides a mock function with given fields: delay
func (_m *FeatureRemote) SetMaxResponseDelay(delay *model.MaxResponseDelayType) {
	_m.Called(delay)
}

// FeatureRemote_SetMaxResponseDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxResponseDelay'
type FeatureRemote_SetMaxResponseDelay_Call struct {
	*mock.Call
}

// SetMaxResponseDelay is a helper method to define mock.On call
//   - delay *model.MaxResponseDelayType
func (_e *FeatureRemote_Expecter) SetMaxResponseDelay(delay interface{}) *FeatureRemote_SetMaxResponseDelay_Call {
	return &FeatureRemote_SetMaxResponseDelay_Call{Call: _e.mock.On("SetMaxResponseDelay", delay)}
}

func (_c *FeatureRemote_SetMaxResponseDelay_Call) Run(run func(delay *model.MaxResponseDelayType)) *FeatureRemote_SetMaxResponseDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.MaxResponseDelayType))
	})
	return _c
}

func (_c *FeatureRemote_SetMaxResponseDelay_Call) Return() *FeatureRemote_SetMaxResponseDelay_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_SetMaxResponseDelay_Call) RunAndReturn(run func(*model.MaxResponseDelayType)) *FeatureRemote_SetMaxResponseDelay_Call {
	_c.Call.Return(run)
	return _c
}

// SetOperations provides a mock function with given fields: functions
func (_m *FeatureRemote) SetOperations(functions []model.FunctionPropertyType) {
	_m.Called(functions)
}

// FeatureRemote_SetOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOperations'
type FeatureRemote_SetOperations_Call struct {
	*mock.Call
}

// SetOperations is a helper method to define mock.On call
//   - functions []model.FunctionPropertyType
func (_e *FeatureRemote_Expecter) SetOperations(functions interface{}) *FeatureRemote_SetOperations_Call {
	return &FeatureRemote_SetOperations_Call{Call: _e.mock.On("SetOperations", functions)}
}

func (_c *FeatureRemote_SetOperations_Call) Run(run func(functions []model.FunctionPropertyType)) *FeatureRemote_SetOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.FunctionPropertyType))
	})
	return _c
}

func (_c *FeatureRemote_SetOperations_Call) Return() *FeatureRemote_SetOperations_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_SetOperations_Call) RunAndReturn(run func([]model.FunctionPropertyType)) *FeatureRemote_SetOperations_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *FeatureRemote) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FeatureRemote_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type FeatureRemote_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) String() *FeatureRemote_String_Call {
	return &FeatureRemote_String_Call{Call: _e.mock.On("String")}
}

func (_c *FeatureRemote_String_Call) Run(run func()) *FeatureRemote_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_String_Call) Return(_a0 string) *FeatureRemote_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_String_Call) RunAndReturn(run func() string) *FeatureRemote_String_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *FeatureRemote) Type() model.FeatureTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 model.FeatureTypeType
	if rf, ok := ret.Get(0).(func() model.FeatureTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FeatureTypeType)
	}

	return r0
}

// FeatureRemote_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type FeatureRemote_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *FeatureRemote_Expecter) Type() *FeatureRemote_Type_Call {
	return &FeatureRemote_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *FeatureRemote_Type_Call) Run(run func()) *FeatureRemote_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureRemote_Type_Call) Return(_a0 model.FeatureTypeType) *FeatureRemote_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureRemote_Type_Call) RunAndReturn(run func() model.FeatureTypeType) *FeatureRemote_Type_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateData provides a mock function with given fields: function, data, filterPartial, filterDelete
func (_m *FeatureRemote) UpdateData(function model.FunctionType, data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType) {
	_m.Called(function, data, filterPartial, filterDelete)
}

// FeatureRemote_UpdateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateData'
type FeatureRemote_UpdateData_Call struct {
	*mock.Call
}

// UpdateData is a helper method to define mock.On call
//   - function model.FunctionType
//   - data interface{}
//   - filterPartial *model.FilterType
//   - filterDelete *model.FilterType
func (_e *FeatureRemote_Expecter) UpdateData(function interface{}, data interface{}, filterPartial interface{}, filterDelete interface{}) *FeatureRemote_UpdateData_Call {
	return &FeatureRemote_UpdateData_Call{Call: _e.mock.On("UpdateData", function, data, filterPartial, filterDelete)}
}

func (_c *FeatureRemote_UpdateData_Call) Run(run func(function model.FunctionType, data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType)) *FeatureRemote_UpdateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}), args[2].(*model.FilterType), args[3].(*model.FilterType))
	})
	return _c
}

func (_c *FeatureRemote_UpdateData_Call) Return() *FeatureRemote_UpdateData_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureRemote_UpdateData_Call) RunAndReturn(run func(model.FunctionType, interface{}, *model.FilterType, *model.FilterType)) *FeatureRemote_UpdateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeatureRemote creates a new instance of FeatureRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeatureRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeatureRemote {
	mock := &FeatureRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

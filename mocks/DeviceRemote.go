// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// DeviceRemote is an autogenerated mock type for the DeviceRemote type
type DeviceRemote struct {
	mock.Mock
}

type DeviceRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceRemote) EXPECT() *DeviceRemote_Expecter {
	return &DeviceRemote_Expecter{mock: &_m.Mock}
}

// AddEntity provides a mock function with given fields: entity
func (_m *DeviceRemote) AddEntity(entity api.EntityRemote) api.EntityRemote {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for AddEntity")
	}

	var r0 api.EntityRemote
	if rf, ok := ret.Get(0).(func(api.EntityRemote) api.EntityRemote); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityRemote)
		}
	}

	return r0
}

// DeviceRemote_AddEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntity'
type DeviceRemote_AddEntity_Call struct {
	*mock.Call
}

// AddEntity is a helper method to define mock.On call
//   - entity api.EntityRemote
func (_e *DeviceRemote_Expecter) AddEntity(entity interface{}) *DeviceRemote_AddEntity_Call {
	return &DeviceRemote_AddEntity_Call{Call: _e.mock.On("AddEntity", entity)}
}

func (_c *DeviceRemote_AddEntity_Call) Run(run func(entity api.EntityRemote)) *DeviceRemote_AddEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemote))
	})
	return _c
}

func (_c *DeviceRemote_AddEntity_Call) Return(_a0 api.EntityRemote) *DeviceRemote_AddEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_AddEntity_Call) RunAndReturn(run func(api.EntityRemote) api.EntityRemote) *DeviceRemote_AddEntity_Call {
	_c.Call.Return(run)
	return _c
}

// AddEntityAndFeatures provides a mock function with given fields: initialData, data
func (_m *DeviceRemote) AddEntityAndFeatures(initialData bool, data *model.NodeManagementDetailedDiscoveryDataType) ([]api.EntityRemote, error) {
	ret := _m.Called(initialData, data)

	if len(ret) == 0 {
		panic("no return value specified for AddEntityAndFeatures")
	}

	var r0 []api.EntityRemote
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, *model.NodeManagementDetailedDiscoveryDataType) ([]api.EntityRemote, error)); ok {
		return rf(initialData, data)
	}
	if rf, ok := ret.Get(0).(func(bool, *model.NodeManagementDetailedDiscoveryDataType) []api.EntityRemote); ok {
		r0 = rf(initialData, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.EntityRemote)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, *model.NodeManagementDetailedDiscoveryDataType) error); ok {
		r1 = rf(initialData, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemote_AddEntityAndFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntityAndFeatures'
type DeviceRemote_AddEntityAndFeatures_Call struct {
	*mock.Call
}

// AddEntityAndFeatures is a helper method to define mock.On call
//   - initialData bool
//   - data *model.NodeManagementDetailedDiscoveryDataType
func (_e *DeviceRemote_Expecter) AddEntityAndFeatures(initialData interface{}, data interface{}) *DeviceRemote_AddEntityAndFeatures_Call {
	return &DeviceRemote_AddEntityAndFeatures_Call{Call: _e.mock.On("AddEntityAndFeatures", initialData, data)}
}

func (_c *DeviceRemote_AddEntityAndFeatures_Call) Run(run func(initialData bool, data *model.NodeManagementDetailedDiscoveryDataType)) *DeviceRemote_AddEntityAndFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(*model.NodeManagementDetailedDiscoveryDataType))
	})
	return _c
}

func (_c *DeviceRemote_AddEntityAndFeatures_Call) Return(_a0 []api.EntityRemote, _a1 error) *DeviceRemote_AddEntityAndFeatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceRemote_AddEntityAndFeatures_Call) RunAndReturn(run func(bool, *model.NodeManagementDetailedDiscoveryDataType) ([]api.EntityRemote, error)) *DeviceRemote_AddEntityAndFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *DeviceRemote) Address() *model.AddressDeviceType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.AddressDeviceType
	if rf, ok := ret.Get(0).(func() *model.AddressDeviceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressDeviceType)
		}
	}

	return r0
}

// DeviceRemote_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type DeviceRemote_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) Address() *DeviceRemote_Address_Call {
	return &DeviceRemote_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *DeviceRemote_Address_Call) Run(run func()) *DeviceRemote_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_Address_Call) Return(_a0 *model.AddressDeviceType) *DeviceRemote_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_Address_Call) RunAndReturn(run func() *model.AddressDeviceType) *DeviceRemote_Address_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEntityInformation provides a mock function with given fields: initialData, entity
func (_m *DeviceRemote) CheckEntityInformation(initialData bool, entity model.NodeManagementDetailedDiscoveryEntityInformationType) error {
	ret := _m.Called(initialData, entity)

	if len(ret) == 0 {
		panic("no return value specified for CheckEntityInformation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, model.NodeManagementDetailedDiscoveryEntityInformationType) error); ok {
		r0 = rf(initialData, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceRemote_CheckEntityInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEntityInformation'
type DeviceRemote_CheckEntityInformation_Call struct {
	*mock.Call
}

// CheckEntityInformation is a helper method to define mock.On call
//   - initialData bool
//   - entity model.NodeManagementDetailedDiscoveryEntityInformationType
func (_e *DeviceRemote_Expecter) CheckEntityInformation(initialData interface{}, entity interface{}) *DeviceRemote_CheckEntityInformation_Call {
	return &DeviceRemote_CheckEntityInformation_Call{Call: _e.mock.On("CheckEntityInformation", initialData, entity)}
}

func (_c *DeviceRemote_CheckEntityInformation_Call) Run(run func(initialData bool, entity model.NodeManagementDetailedDiscoveryEntityInformationType)) *DeviceRemote_CheckEntityInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(model.NodeManagementDetailedDiscoveryEntityInformationType))
	})
	return _c
}

func (_c *DeviceRemote_CheckEntityInformation_Call) Return(_a0 error) *DeviceRemote_CheckEntityInformation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_CheckEntityInformation_Call) RunAndReturn(run func(bool, model.NodeManagementDetailedDiscoveryEntityInformationType) error) *DeviceRemote_CheckEntityInformation_Call {
	_c.Call.Return(run)
	return _c
}

// DestinationData provides a mock function with given fields:
func (_m *DeviceRemote) DestinationData() model.NodeManagementDestinationDataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DestinationData")
	}

	var r0 model.NodeManagementDestinationDataType
	if rf, ok := ret.Get(0).(func() model.NodeManagementDestinationDataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NodeManagementDestinationDataType)
	}

	return r0
}

// DeviceRemote_DestinationData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestinationData'
type DeviceRemote_DestinationData_Call struct {
	*mock.Call
}

// DestinationData is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) DestinationData() *DeviceRemote_DestinationData_Call {
	return &DeviceRemote_DestinationData_Call{Call: _e.mock.On("DestinationData")}
}

func (_c *DeviceRemote_DestinationData_Call) Run(run func()) *DeviceRemote_DestinationData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_DestinationData_Call) Return(_a0 model.NodeManagementDestinationDataType) *DeviceRemote_DestinationData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_DestinationData_Call) RunAndReturn(run func() model.NodeManagementDestinationDataType) *DeviceRemote_DestinationData_Call {
	_c.Call.Return(run)
	return _c
}

// DeviceType provides a mock function with given fields:
func (_m *DeviceRemote) DeviceType() *model.DeviceTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceType")
	}

	var r0 *model.DeviceTypeType
	if rf, ok := ret.Get(0).(func() *model.DeviceTypeType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceTypeType)
		}
	}

	return r0
}

// DeviceRemote_DeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeviceType'
type DeviceRemote_DeviceType_Call struct {
	*mock.Call
}

// DeviceType is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) DeviceType() *DeviceRemote_DeviceType_Call {
	return &DeviceRemote_DeviceType_Call{Call: _e.mock.On("DeviceType")}
}

func (_c *DeviceRemote_DeviceType_Call) Run(run func()) *DeviceRemote_DeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_DeviceType_Call) Return(_a0 *model.DeviceTypeType) *DeviceRemote_DeviceType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_DeviceType_Call) RunAndReturn(run func() *model.DeviceTypeType) *DeviceRemote_DeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// Entities provides a mock function with given fields:
func (_m *DeviceRemote) Entities() []api.EntityRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entities")
	}

	var r0 []api.EntityRemote
	if rf, ok := ret.Get(0).(func() []api.EntityRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.EntityRemote)
		}
	}

	return r0
}

// DeviceRemote_Entities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entities'
type DeviceRemote_Entities_Call struct {
	*mock.Call
}

// Entities is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) Entities() *DeviceRemote_Entities_Call {
	return &DeviceRemote_Entities_Call{Call: _e.mock.On("Entities")}
}

func (_c *DeviceRemote_Entities_Call) Run(run func()) *DeviceRemote_Entities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_Entities_Call) Return(_a0 []api.EntityRemote) *DeviceRemote_Entities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_Entities_Call) RunAndReturn(run func() []api.EntityRemote) *DeviceRemote_Entities_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields: id
func (_m *DeviceRemote) Entity(id []model.AddressEntityType) api.EntityRemote {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 api.EntityRemote
	if rf, ok := ret.Get(0).(func([]model.AddressEntityType) api.EntityRemote); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityRemote)
		}
	}

	return r0
}

// DeviceRemote_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type DeviceRemote_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
//   - id []model.AddressEntityType
func (_e *DeviceRemote_Expecter) Entity(id interface{}) *DeviceRemote_Entity_Call {
	return &DeviceRemote_Entity_Call{Call: _e.mock.On("Entity", id)}
}

func (_c *DeviceRemote_Entity_Call) Run(run func(id []model.AddressEntityType)) *DeviceRemote_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.AddressEntityType))
	})
	return _c
}

func (_c *DeviceRemote_Entity_Call) Return(_a0 api.EntityRemote) *DeviceRemote_Entity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_Entity_Call) RunAndReturn(run func([]model.AddressEntityType) api.EntityRemote) *DeviceRemote_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureByAddress provides a mock function with given fields: address
func (_m *DeviceRemote) FeatureByAddress(address *model.FeatureAddressType) api.FeatureRemote {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for FeatureByAddress")
	}

	var r0 api.FeatureRemote
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) api.FeatureRemote); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureRemote)
		}
	}

	return r0
}

// DeviceRemote_FeatureByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureByAddress'
type DeviceRemote_FeatureByAddress_Call struct {
	*mock.Call
}

// FeatureByAddress is a helper method to define mock.On call
//   - address *model.FeatureAddressType
func (_e *DeviceRemote_Expecter) FeatureByAddress(address interface{}) *DeviceRemote_FeatureByAddress_Call {
	return &DeviceRemote_FeatureByAddress_Call{Call: _e.mock.On("FeatureByAddress", address)}
}

func (_c *DeviceRemote_FeatureByAddress_Call) Run(run func(address *model.FeatureAddressType)) *DeviceRemote_FeatureByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *DeviceRemote_FeatureByAddress_Call) Return(_a0 api.FeatureRemote) *DeviceRemote_FeatureByAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_FeatureByAddress_Call) RunAndReturn(run func(*model.FeatureAddressType) api.FeatureRemote) *DeviceRemote_FeatureByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureByEntityTypeAndRole provides a mock function with given fields: entity, featureType, role
func (_m *DeviceRemote) FeatureByEntityTypeAndRole(entity api.EntityRemote, featureType model.FeatureTypeType, role model.RoleType) api.FeatureRemote {
	ret := _m.Called(entity, featureType, role)

	if len(ret) == 0 {
		panic("no return value specified for FeatureByEntityTypeAndRole")
	}

	var r0 api.FeatureRemote
	if rf, ok := ret.Get(0).(func(api.EntityRemote, model.FeatureTypeType, model.RoleType) api.FeatureRemote); ok {
		r0 = rf(entity, featureType, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureRemote)
		}
	}

	return r0
}

// DeviceRemote_FeatureByEntityTypeAndRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureByEntityTypeAndRole'
type DeviceRemote_FeatureByEntityTypeAndRole_Call struct {
	*mock.Call
}

// FeatureByEntityTypeAndRole is a helper method to define mock.On call
//   - entity api.EntityRemote
//   - featureType model.FeatureTypeType
//   - role model.RoleType
func (_e *DeviceRemote_Expecter) FeatureByEntityTypeAndRole(entity interface{}, featureType interface{}, role interface{}) *DeviceRemote_FeatureByEntityTypeAndRole_Call {
	return &DeviceRemote_FeatureByEntityTypeAndRole_Call{Call: _e.mock.On("FeatureByEntityTypeAndRole", entity, featureType, role)}
}

func (_c *DeviceRemote_FeatureByEntityTypeAndRole_Call) Run(run func(entity api.EntityRemote, featureType model.FeatureTypeType, role model.RoleType)) *DeviceRemote_FeatureByEntityTypeAndRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemote), args[1].(model.FeatureTypeType), args[2].(model.RoleType))
	})
	return _c
}

func (_c *DeviceRemote_FeatureByEntityTypeAndRole_Call) Return(_a0 api.FeatureRemote) *DeviceRemote_FeatureByEntityTypeAndRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_FeatureByEntityTypeAndRole_Call) RunAndReturn(run func(api.EntityRemote, model.FeatureTypeType, model.RoleType) api.FeatureRemote) *DeviceRemote_FeatureByEntityTypeAndRole_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureSet provides a mock function with given fields:
func (_m *DeviceRemote) FeatureSet() *model.NetworkManagementFeatureSetType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeatureSet")
	}

	var r0 *model.NetworkManagementFeatureSetType
	if rf, ok := ret.Get(0).(func() *model.NetworkManagementFeatureSetType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NetworkManagementFeatureSetType)
		}
	}

	return r0
}

// DeviceRemote_FeatureSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureSet'
type DeviceRemote_FeatureSet_Call struct {
	*mock.Call
}

// FeatureSet is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) FeatureSet() *DeviceRemote_FeatureSet_Call {
	return &DeviceRemote_FeatureSet_Call{Call: _e.mock.On("FeatureSet")}
}

func (_c *DeviceRemote_FeatureSet_Call) Run(run func()) *DeviceRemote_FeatureSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_FeatureSet_Call) Return(_a0 *model.NetworkManagementFeatureSetType) *DeviceRemote_FeatureSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_FeatureSet_Call) RunAndReturn(run func() *model.NetworkManagementFeatureSetType) *DeviceRemote_FeatureSet_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSpineMesssage provides a mock function with given fields: message
func (_m *DeviceRemote) HandleSpineMesssage(message []byte) (*model.MsgCounterType, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for HandleSpineMesssage")
	}

	var r0 *model.MsgCounterType
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*model.MsgCounterType, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func([]byte) *model.MsgCounterType); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemote_HandleSpineMesssage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSpineMesssage'
type DeviceRemote_HandleSpineMesssage_Call struct {
	*mock.Call
}

// HandleSpineMesssage is a helper method to define mock.On call
//   - message []byte
func (_e *DeviceRemote_Expecter) HandleSpineMesssage(message interface{}) *DeviceRemote_HandleSpineMesssage_Call {
	return &DeviceRemote_HandleSpineMesssage_Call{Call: _e.mock.On("HandleSpineMesssage", message)}
}

func (_c *DeviceRemote_HandleSpineMesssage_Call) Run(run func(message []byte)) *DeviceRemote_HandleSpineMesssage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *DeviceRemote_HandleSpineMesssage_Call) Return(_a0 *model.MsgCounterType, _a1 error) *DeviceRemote_HandleSpineMesssage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeviceRemote_HandleSpineMesssage_Call) RunAndReturn(run func([]byte) (*model.MsgCounterType, error)) *DeviceRemote_HandleSpineMesssage_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveByAddress provides a mock function with given fields: addr
func (_m *DeviceRemote) RemoveByAddress(addr []model.AddressEntityType) api.EntityRemote {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for RemoveByAddress")
	}

	var r0 api.EntityRemote
	if rf, ok := ret.Get(0).(func([]model.AddressEntityType) api.EntityRemote); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityRemote)
		}
	}

	return r0
}

// DeviceRemote_RemoveByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveByAddress'
type DeviceRemote_RemoveByAddress_Call struct {
	*mock.Call
}

// RemoveByAddress is a helper method to define mock.On call
//   - addr []model.AddressEntityType
func (_e *DeviceRemote_Expecter) RemoveByAddress(addr interface{}) *DeviceRemote_RemoveByAddress_Call {
	return &DeviceRemote_RemoveByAddress_Call{Call: _e.mock.On("RemoveByAddress", addr)}
}

func (_c *DeviceRemote_RemoveByAddress_Call) Run(run func(addr []model.AddressEntityType)) *DeviceRemote_RemoveByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.AddressEntityType))
	})
	return _c
}

func (_c *DeviceRemote_RemoveByAddress_Call) Return(_a0 api.EntityRemote) *DeviceRemote_RemoveByAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_RemoveByAddress_Call) RunAndReturn(run func([]model.AddressEntityType) api.EntityRemote) *DeviceRemote_RemoveByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Sender provides a mock function with given fields:
func (_m *DeviceRemote) Sender() api.Sender {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sender")
	}

	var r0 api.Sender
	if rf, ok := ret.Get(0).(func() api.Sender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Sender)
		}
	}

	return r0
}

// DeviceRemote_Sender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sender'
type DeviceRemote_Sender_Call struct {
	*mock.Call
}

// Sender is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) Sender() *DeviceRemote_Sender_Call {
	return &DeviceRemote_Sender_Call{Call: _e.mock.On("Sender")}
}

func (_c *DeviceRemote_Sender_Call) Run(run func()) *DeviceRemote_Sender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_Sender_Call) Return(_a0 api.Sender) *DeviceRemote_Sender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_Sender_Call) RunAndReturn(run func() api.Sender) *DeviceRemote_Sender_Call {
	_c.Call.Return(run)
	return _c
}

// SetAddress provides a mock function with given fields: address
func (_m *DeviceRemote) SetAddress(address *model.AddressDeviceType) {
	_m.Called(address)
}

// DeviceRemote_SetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAddress'
type DeviceRemote_SetAddress_Call struct {
	*mock.Call
}

// SetAddress is a helper method to define mock.On call
//   - address *model.AddressDeviceType
func (_e *DeviceRemote_Expecter) SetAddress(address interface{}) *DeviceRemote_SetAddress_Call {
	return &DeviceRemote_SetAddress_Call{Call: _e.mock.On("SetAddress", address)}
}

func (_c *DeviceRemote_SetAddress_Call) Run(run func(address *model.AddressDeviceType)) *DeviceRemote_SetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.AddressDeviceType))
	})
	return _c
}

func (_c *DeviceRemote_SetAddress_Call) Return() *DeviceRemote_SetAddress_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceRemote_SetAddress_Call) RunAndReturn(run func(*model.AddressDeviceType)) *DeviceRemote_SetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Ski provides a mock function with given fields:
func (_m *DeviceRemote) Ski() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ski")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeviceRemote_Ski_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ski'
type DeviceRemote_Ski_Call struct {
	*mock.Call
}

// Ski is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) Ski() *DeviceRemote_Ski_Call {
	return &DeviceRemote_Ski_Call{Call: _e.mock.On("Ski")}
}

func (_c *DeviceRemote_Ski_Call) Run(run func()) *DeviceRemote_Ski_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_Ski_Call) Return(_a0 string) *DeviceRemote_Ski_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_Ski_Call) RunAndReturn(run func() string) *DeviceRemote_Ski_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function with given fields: description
func (_m *DeviceRemote) UpdateDevice(description *model.NetworkManagementDeviceDescriptionDataType) {
	_m.Called(description)
}

// DeviceRemote_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type DeviceRemote_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - description *model.NetworkManagementDeviceDescriptionDataType
func (_e *DeviceRemote_Expecter) UpdateDevice(description interface{}) *DeviceRemote_UpdateDevice_Call {
	return &DeviceRemote_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", description)}
}

func (_c *DeviceRemote_UpdateDevice_Call) Run(run func(description *model.NetworkManagementDeviceDescriptionDataType)) *DeviceRemote_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.NetworkManagementDeviceDescriptionDataType))
	})
	return _c
}

func (_c *DeviceRemote_UpdateDevice_Call) Return() *DeviceRemote_UpdateDevice_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceRemote_UpdateDevice_Call) RunAndReturn(run func(*model.NetworkManagementDeviceDescriptionDataType)) *DeviceRemote_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UseCases provides a mock function with given fields:
func (_m *DeviceRemote) UseCases() []model.UseCaseInformationDataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseCases")
	}

	var r0 []model.UseCaseInformationDataType
	if rf, ok := ret.Get(0).(func() []model.UseCaseInformationDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UseCaseInformationDataType)
		}
	}

	return r0
}

// DeviceRemote_UseCases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCases'
type DeviceRemote_UseCases_Call struct {
	*mock.Call
}

// UseCases is a helper method to define mock.On call
func (_e *DeviceRemote_Expecter) UseCases() *DeviceRemote_UseCases_Call {
	return &DeviceRemote_UseCases_Call{Call: _e.mock.On("UseCases")}
}

func (_c *DeviceRemote_UseCases_Call) Run(run func()) *DeviceRemote_UseCases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceRemote_UseCases_Call) Return(_a0 []model.UseCaseInformationDataType) *DeviceRemote_UseCases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_UseCases_Call) RunAndReturn(run func() []model.UseCaseInformationDataType) *DeviceRemote_UseCases_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUseCaseScenariosAndFeaturesSupport provides a mock function with given fields: usecaseActor, usecaseName, scenarios, serverFeatures
func (_m *DeviceRemote) VerifyUseCaseScenariosAndFeaturesSupport(usecaseActor model.UseCaseActorType, usecaseName model.UseCaseNameType, scenarios []model.UseCaseScenarioSupportType, serverFeatures []model.FeatureTypeType) bool {
	ret := _m.Called(usecaseActor, usecaseName, scenarios, serverFeatures)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUseCaseScenariosAndFeaturesSupport")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.UseCaseActorType, model.UseCaseNameType, []model.UseCaseScenarioSupportType, []model.FeatureTypeType) bool); ok {
		r0 = rf(usecaseActor, usecaseName, scenarios, serverFeatures)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUseCaseScenariosAndFeaturesSupport'
type DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call struct {
	*mock.Call
}

// VerifyUseCaseScenariosAndFeaturesSupport is a helper method to define mock.On call
//   - usecaseActor model.UseCaseActorType
//   - usecaseName model.UseCaseNameType
//   - scenarios []model.UseCaseScenarioSupportType
//   - serverFeatures []model.FeatureTypeType
func (_e *DeviceRemote_Expecter) VerifyUseCaseScenariosAndFeaturesSupport(usecaseActor interface{}, usecaseName interface{}, scenarios interface{}, serverFeatures interface{}) *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call {
	return &DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call{Call: _e.mock.On("VerifyUseCaseScenariosAndFeaturesSupport", usecaseActor, usecaseName, scenarios, serverFeatures)}
}

func (_c *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call) Run(run func(usecaseActor model.UseCaseActorType, usecaseName model.UseCaseNameType, scenarios []model.UseCaseScenarioSupportType, serverFeatures []model.FeatureTypeType)) *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UseCaseActorType), args[1].(model.UseCaseNameType), args[2].([]model.UseCaseScenarioSupportType), args[3].([]model.FeatureTypeType))
	})
	return _c
}

func (_c *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call) Return(_a0 bool) *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call) RunAndReturn(run func(model.UseCaseActorType, model.UseCaseNameType, []model.UseCaseScenarioSupportType, []model.FeatureTypeType) bool) *DeviceRemote_VerifyUseCaseScenariosAndFeaturesSupport_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceRemote creates a new instance of DeviceRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceRemote {
	mock := &DeviceRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

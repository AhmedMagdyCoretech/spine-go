// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// FunctionDataCmd is an autogenerated mock type for the FunctionDataCmd type
type FunctionDataCmd struct {
	mock.Mock
}

type FunctionDataCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *FunctionDataCmd) EXPECT() *FunctionDataCmd_Expecter {
	return &FunctionDataCmd_Expecter{mock: &_m.Mock}
}

// DataCopyAny provides a mock function with given fields:
func (_m *FunctionDataCmd) DataCopyAny() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataCopyAny")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FunctionDataCmd_DataCopyAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataCopyAny'
type FunctionDataCmd_DataCopyAny_Call struct {
	*mock.Call
}

// DataCopyAny is a helper method to define mock.On call
func (_e *FunctionDataCmd_Expecter) DataCopyAny() *FunctionDataCmd_DataCopyAny_Call {
	return &FunctionDataCmd_DataCopyAny_Call{Call: _e.mock.On("DataCopyAny")}
}

func (_c *FunctionDataCmd_DataCopyAny_Call) Run(run func()) *FunctionDataCmd_DataCopyAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FunctionDataCmd_DataCopyAny_Call) Return(_a0 interface{}) *FunctionDataCmd_DataCopyAny_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_DataCopyAny_Call) RunAndReturn(run func() interface{}) *FunctionDataCmd_DataCopyAny_Call {
	_c.Call.Return(run)
	return _c
}

// Function provides a mock function with given fields:
func (_m *FunctionDataCmd) Function() model.FunctionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Function")
	}

	var r0 model.FunctionType
	if rf, ok := ret.Get(0).(func() model.FunctionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FunctionType)
	}

	return r0
}

// FunctionDataCmd_Function_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Function'
type FunctionDataCmd_Function_Call struct {
	*mock.Call
}

// Function is a helper method to define mock.On call
func (_e *FunctionDataCmd_Expecter) Function() *FunctionDataCmd_Function_Call {
	return &FunctionDataCmd_Function_Call{Call: _e.mock.On("Function")}
}

func (_c *FunctionDataCmd_Function_Call) Run(run func()) *FunctionDataCmd_Function_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FunctionDataCmd_Function_Call) Return(_a0 model.FunctionType) *FunctionDataCmd_Function_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_Function_Call) RunAndReturn(run func() model.FunctionType) *FunctionDataCmd_Function_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCmdType provides a mock function with given fields: deleteSelector, partialSelector, partialWithoutSelector, deleteElements
func (_m *FunctionDataCmd) NotifyCmdType(deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector bool, deleteElements interface{}) model.CmdType {
	ret := _m.Called(deleteSelector, partialSelector, partialWithoutSelector, deleteElements)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCmdType")
	}

	var r0 model.CmdType
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, bool, interface{}) model.CmdType); ok {
		r0 = rf(deleteSelector, partialSelector, partialWithoutSelector, deleteElements)
	} else {
		r0 = ret.Get(0).(model.CmdType)
	}

	return r0
}

// FunctionDataCmd_NotifyCmdType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCmdType'
type FunctionDataCmd_NotifyCmdType_Call struct {
	*mock.Call
}

// NotifyCmdType is a helper method to define mock.On call
//   - deleteSelector interface{}
//   - partialSelector interface{}
//   - partialWithoutSelector bool
//   - deleteElements interface{}
func (_e *FunctionDataCmd_Expecter) NotifyCmdType(deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector interface{}, deleteElements interface{}) *FunctionDataCmd_NotifyCmdType_Call {
	return &FunctionDataCmd_NotifyCmdType_Call{Call: _e.mock.On("NotifyCmdType", deleteSelector, partialSelector, partialWithoutSelector, deleteElements)}
}

func (_c *FunctionDataCmd_NotifyCmdType_Call) Run(run func(deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector bool, deleteElements interface{})) *FunctionDataCmd_NotifyCmdType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}), args[2].(bool), args[3].(interface{}))
	})
	return _c
}

func (_c *FunctionDataCmd_NotifyCmdType_Call) Return(_a0 model.CmdType) *FunctionDataCmd_NotifyCmdType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_NotifyCmdType_Call) RunAndReturn(run func(interface{}, interface{}, bool, interface{}) model.CmdType) *FunctionDataCmd_NotifyCmdType_Call {
	_c.Call.Return(run)
	return _c
}

// ReadCmdType provides a mock function with given fields: partialSelector, elements
func (_m *FunctionDataCmd) ReadCmdType(partialSelector interface{}, elements interface{}) model.CmdType {
	ret := _m.Called(partialSelector, elements)

	if len(ret) == 0 {
		panic("no return value specified for ReadCmdType")
	}

	var r0 model.CmdType
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) model.CmdType); ok {
		r0 = rf(partialSelector, elements)
	} else {
		r0 = ret.Get(0).(model.CmdType)
	}

	return r0
}

// FunctionDataCmd_ReadCmdType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadCmdType'
type FunctionDataCmd_ReadCmdType_Call struct {
	*mock.Call
}

// ReadCmdType is a helper method to define mock.On call
//   - partialSelector interface{}
//   - elements interface{}
func (_e *FunctionDataCmd_Expecter) ReadCmdType(partialSelector interface{}, elements interface{}) *FunctionDataCmd_ReadCmdType_Call {
	return &FunctionDataCmd_ReadCmdType_Call{Call: _e.mock.On("ReadCmdType", partialSelector, elements)}
}

func (_c *FunctionDataCmd_ReadCmdType_Call) Run(run func(partialSelector interface{}, elements interface{})) *FunctionDataCmd_ReadCmdType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *FunctionDataCmd_ReadCmdType_Call) Return(_a0 model.CmdType) *FunctionDataCmd_ReadCmdType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_ReadCmdType_Call) RunAndReturn(run func(interface{}, interface{}) model.CmdType) *FunctionDataCmd_ReadCmdType_Call {
	_c.Call.Return(run)
	return _c
}

// ReplyCmdType provides a mock function with given fields: partial
func (_m *FunctionDataCmd) ReplyCmdType(partial bool) model.CmdType {
	ret := _m.Called(partial)

	if len(ret) == 0 {
		panic("no return value specified for ReplyCmdType")
	}

	var r0 model.CmdType
	if rf, ok := ret.Get(0).(func(bool) model.CmdType); ok {
		r0 = rf(partial)
	} else {
		r0 = ret.Get(0).(model.CmdType)
	}

	return r0
}

// FunctionDataCmd_ReplyCmdType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplyCmdType'
type FunctionDataCmd_ReplyCmdType_Call struct {
	*mock.Call
}

// ReplyCmdType is a helper method to define mock.On call
//   - partial bool
func (_e *FunctionDataCmd_Expecter) ReplyCmdType(partial interface{}) *FunctionDataCmd_ReplyCmdType_Call {
	return &FunctionDataCmd_ReplyCmdType_Call{Call: _e.mock.On("ReplyCmdType", partial)}
}

func (_c *FunctionDataCmd_ReplyCmdType_Call) Run(run func(partial bool)) *FunctionDataCmd_ReplyCmdType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *FunctionDataCmd_ReplyCmdType_Call) Return(_a0 model.CmdType) *FunctionDataCmd_ReplyCmdType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_ReplyCmdType_Call) RunAndReturn(run func(bool) model.CmdType) *FunctionDataCmd_ReplyCmdType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataAny provides a mock function with given fields: data, filterPartial, filterDelete
func (_m *FunctionDataCmd) UpdateDataAny(data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType) {
	_m.Called(data, filterPartial, filterDelete)
}

// FunctionDataCmd_UpdateDataAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataAny'
type FunctionDataCmd_UpdateDataAny_Call struct {
	*mock.Call
}

// UpdateDataAny is a helper method to define mock.On call
//   - data interface{}
//   - filterPartial *model.FilterType
//   - filterDelete *model.FilterType
func (_e *FunctionDataCmd_Expecter) UpdateDataAny(data interface{}, filterPartial interface{}, filterDelete interface{}) *FunctionDataCmd_UpdateDataAny_Call {
	return &FunctionDataCmd_UpdateDataAny_Call{Call: _e.mock.On("UpdateDataAny", data, filterPartial, filterDelete)}
}

func (_c *FunctionDataCmd_UpdateDataAny_Call) Run(run func(data interface{}, filterPartial *model.FilterType, filterDelete *model.FilterType)) *FunctionDataCmd_UpdateDataAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(*model.FilterType), args[2].(*model.FilterType))
	})
	return _c
}

func (_c *FunctionDataCmd_UpdateDataAny_Call) Return() *FunctionDataCmd_UpdateDataAny_Call {
	_c.Call.Return()
	return _c
}

func (_c *FunctionDataCmd_UpdateDataAny_Call) RunAndReturn(run func(interface{}, *model.FilterType, *model.FilterType)) *FunctionDataCmd_UpdateDataAny_Call {
	_c.Call.Return(run)
	return _c
}

// WriteCmdType provides a mock function with given fields: deleteSelector, partialSelector, deleteElements
func (_m *FunctionDataCmd) WriteCmdType(deleteSelector interface{}, partialSelector interface{}, deleteElements interface{}) model.CmdType {
	ret := _m.Called(deleteSelector, partialSelector, deleteElements)

	if len(ret) == 0 {
		panic("no return value specified for WriteCmdType")
	}

	var r0 model.CmdType
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}) model.CmdType); ok {
		r0 = rf(deleteSelector, partialSelector, deleteElements)
	} else {
		r0 = ret.Get(0).(model.CmdType)
	}

	return r0
}

// FunctionDataCmd_WriteCmdType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteCmdType'
type FunctionDataCmd_WriteCmdType_Call struct {
	*mock.Call
}

// WriteCmdType is a helper method to define mock.On call
//   - deleteSelector interface{}
//   - partialSelector interface{}
//   - deleteElements interface{}
func (_e *FunctionDataCmd_Expecter) WriteCmdType(deleteSelector interface{}, partialSelector interface{}, deleteElements interface{}) *FunctionDataCmd_WriteCmdType_Call {
	return &FunctionDataCmd_WriteCmdType_Call{Call: _e.mock.On("WriteCmdType", deleteSelector, partialSelector, deleteElements)}
}

func (_c *FunctionDataCmd_WriteCmdType_Call) Run(run func(deleteSelector interface{}, partialSelector interface{}, deleteElements interface{})) *FunctionDataCmd_WriteCmdType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *FunctionDataCmd_WriteCmdType_Call) Return(_a0 model.CmdType) *FunctionDataCmd_WriteCmdType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FunctionDataCmd_WriteCmdType_Call) RunAndReturn(run func(interface{}, interface{}, interface{}) model.CmdType) *FunctionDataCmd_WriteCmdType_Call {
	_c.Call.Return(run)
	return _c
}

// NewFunctionDataCmd creates a new instance of FunctionDataCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFunctionDataCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *FunctionDataCmd {
	mock := &FunctionDataCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

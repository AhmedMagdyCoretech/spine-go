// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	ship_goapi "github.com/enbility/ship-go/api"
)

// DeviceLocal is an autogenerated mock type for the DeviceLocal type
type DeviceLocal struct {
	mock.Mock
}

type DeviceLocal_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceLocal) EXPECT() *DeviceLocal_Expecter {
	return &DeviceLocal_Expecter{mock: &_m.Mock}
}

// AddEntity provides a mock function with given fields: entity
func (_m *DeviceLocal) AddEntity(entity api.EntityLocal) {
	_m.Called(entity)
}

// DeviceLocal_AddEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntity'
type DeviceLocal_AddEntity_Call struct {
	*mock.Call
}

// AddEntity is a helper method to define mock.On call
//   - entity api.EntityLocal
func (_e *DeviceLocal_Expecter) AddEntity(entity interface{}) *DeviceLocal_AddEntity_Call {
	return &DeviceLocal_AddEntity_Call{Call: _e.mock.On("AddEntity", entity)}
}

func (_c *DeviceLocal_AddEntity_Call) Run(run func(entity api.EntityLocal)) *DeviceLocal_AddEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityLocal))
	})
	return _c
}

func (_c *DeviceLocal_AddEntity_Call) Return() *DeviceLocal_AddEntity_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_AddEntity_Call) RunAndReturn(run func(api.EntityLocal)) *DeviceLocal_AddEntity_Call {
	_c.Call.Return(run)
	return _c
}

// AddRemoteDeviceForSki provides a mock function with given fields: ski, rDevice
func (_m *DeviceLocal) AddRemoteDeviceForSki(ski string, rDevice api.DeviceRemote) {
	_m.Called(ski, rDevice)
}

// DeviceLocal_AddRemoteDeviceForSki_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRemoteDeviceForSki'
type DeviceLocal_AddRemoteDeviceForSki_Call struct {
	*mock.Call
}

// AddRemoteDeviceForSki is a helper method to define mock.On call
//   - ski string
//   - rDevice api.DeviceRemote
func (_e *DeviceLocal_Expecter) AddRemoteDeviceForSki(ski interface{}, rDevice interface{}) *DeviceLocal_AddRemoteDeviceForSki_Call {
	return &DeviceLocal_AddRemoteDeviceForSki_Call{Call: _e.mock.On("AddRemoteDeviceForSki", ski, rDevice)}
}

func (_c *DeviceLocal_AddRemoteDeviceForSki_Call) Run(run func(ski string, rDevice api.DeviceRemote)) *DeviceLocal_AddRemoteDeviceForSki_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(api.DeviceRemote))
	})
	return _c
}

func (_c *DeviceLocal_AddRemoteDeviceForSki_Call) Return() *DeviceLocal_AddRemoteDeviceForSki_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_AddRemoteDeviceForSki_Call) RunAndReturn(run func(string, api.DeviceRemote)) *DeviceLocal_AddRemoteDeviceForSki_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *DeviceLocal) Address() *model.AddressDeviceType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.AddressDeviceType
	if rf, ok := ret.Get(0).(func() *model.AddressDeviceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressDeviceType)
		}
	}

	return r0
}

// DeviceLocal_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type DeviceLocal_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) Address() *DeviceLocal_Address_Call {
	return &DeviceLocal_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *DeviceLocal_Address_Call) Run(run func()) *DeviceLocal_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_Address_Call) Return(_a0 *model.AddressDeviceType) *DeviceLocal_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_Address_Call) RunAndReturn(run func() *model.AddressDeviceType) *DeviceLocal_Address_Call {
	_c.Call.Return(run)
	return _c
}

// BindingManager provides a mock function with given fields:
func (_m *DeviceLocal) BindingManager() api.BindingManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BindingManager")
	}

	var r0 api.BindingManager
	if rf, ok := ret.Get(0).(func() api.BindingManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.BindingManager)
		}
	}

	return r0
}

// DeviceLocal_BindingManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindingManager'
type DeviceLocal_BindingManager_Call struct {
	*mock.Call
}

// BindingManager is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) BindingManager() *DeviceLocal_BindingManager_Call {
	return &DeviceLocal_BindingManager_Call{Call: _e.mock.On("BindingManager")}
}

func (_c *DeviceLocal_BindingManager_Call) Run(run func()) *DeviceLocal_BindingManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_BindingManager_Call) Return(_a0 api.BindingManager) *DeviceLocal_BindingManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_BindingManager_Call) RunAndReturn(run func() api.BindingManager) *DeviceLocal_BindingManager_Call {
	_c.Call.Return(run)
	return _c
}

// DestinationData provides a mock function with given fields:
func (_m *DeviceLocal) DestinationData() model.NodeManagementDestinationDataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DestinationData")
	}

	var r0 model.NodeManagementDestinationDataType
	if rf, ok := ret.Get(0).(func() model.NodeManagementDestinationDataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NodeManagementDestinationDataType)
	}

	return r0
}

// DeviceLocal_DestinationData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestinationData'
type DeviceLocal_DestinationData_Call struct {
	*mock.Call
}

// DestinationData is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) DestinationData() *DeviceLocal_DestinationData_Call {
	return &DeviceLocal_DestinationData_Call{Call: _e.mock.On("DestinationData")}
}

func (_c *DeviceLocal_DestinationData_Call) Run(run func()) *DeviceLocal_DestinationData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_DestinationData_Call) Return(_a0 model.NodeManagementDestinationDataType) *DeviceLocal_DestinationData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_DestinationData_Call) RunAndReturn(run func() model.NodeManagementDestinationDataType) *DeviceLocal_DestinationData_Call {
	_c.Call.Return(run)
	return _c
}

// DeviceType provides a mock function with given fields:
func (_m *DeviceLocal) DeviceType() *model.DeviceTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceType")
	}

	var r0 *model.DeviceTypeType
	if rf, ok := ret.Get(0).(func() *model.DeviceTypeType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceTypeType)
		}
	}

	return r0
}

// DeviceLocal_DeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeviceType'
type DeviceLocal_DeviceType_Call struct {
	*mock.Call
}

// DeviceType is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) DeviceType() *DeviceLocal_DeviceType_Call {
	return &DeviceLocal_DeviceType_Call{Call: _e.mock.On("DeviceType")}
}

func (_c *DeviceLocal_DeviceType_Call) Run(run func()) *DeviceLocal_DeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_DeviceType_Call) Return(_a0 *model.DeviceTypeType) *DeviceLocal_DeviceType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_DeviceType_Call) RunAndReturn(run func() *model.DeviceTypeType) *DeviceLocal_DeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// Entities provides a mock function with given fields:
func (_m *DeviceLocal) Entities() []api.EntityLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entities")
	}

	var r0 []api.EntityLocal
	if rf, ok := ret.Get(0).(func() []api.EntityLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.EntityLocal)
		}
	}

	return r0
}

// DeviceLocal_Entities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entities'
type DeviceLocal_Entities_Call struct {
	*mock.Call
}

// Entities is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) Entities() *DeviceLocal_Entities_Call {
	return &DeviceLocal_Entities_Call{Call: _e.mock.On("Entities")}
}

func (_c *DeviceLocal_Entities_Call) Run(run func()) *DeviceLocal_Entities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_Entities_Call) Return(_a0 []api.EntityLocal) *DeviceLocal_Entities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_Entities_Call) RunAndReturn(run func() []api.EntityLocal) *DeviceLocal_Entities_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields: id
func (_m *DeviceLocal) Entity(id []model.AddressEntityType) api.EntityLocal {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 api.EntityLocal
	if rf, ok := ret.Get(0).(func([]model.AddressEntityType) api.EntityLocal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityLocal)
		}
	}

	return r0
}

// DeviceLocal_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type DeviceLocal_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
//   - id []model.AddressEntityType
func (_e *DeviceLocal_Expecter) Entity(id interface{}) *DeviceLocal_Entity_Call {
	return &DeviceLocal_Entity_Call{Call: _e.mock.On("Entity", id)}
}

func (_c *DeviceLocal_Entity_Call) Run(run func(id []model.AddressEntityType)) *DeviceLocal_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.AddressEntityType))
	})
	return _c
}

func (_c *DeviceLocal_Entity_Call) Return(_a0 api.EntityLocal) *DeviceLocal_Entity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_Entity_Call) RunAndReturn(run func([]model.AddressEntityType) api.EntityLocal) *DeviceLocal_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// EntityForType provides a mock function with given fields: entityType
func (_m *DeviceLocal) EntityForType(entityType model.EntityTypeType) api.EntityLocal {
	ret := _m.Called(entityType)

	if len(ret) == 0 {
		panic("no return value specified for EntityForType")
	}

	var r0 api.EntityLocal
	if rf, ok := ret.Get(0).(func(model.EntityTypeType) api.EntityLocal); ok {
		r0 = rf(entityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityLocal)
		}
	}

	return r0
}

// DeviceLocal_EntityForType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntityForType'
type DeviceLocal_EntityForType_Call struct {
	*mock.Call
}

// EntityForType is a helper method to define mock.On call
//   - entityType model.EntityTypeType
func (_e *DeviceLocal_Expecter) EntityForType(entityType interface{}) *DeviceLocal_EntityForType_Call {
	return &DeviceLocal_EntityForType_Call{Call: _e.mock.On("EntityForType", entityType)}
}

func (_c *DeviceLocal_EntityForType_Call) Run(run func(entityType model.EntityTypeType)) *DeviceLocal_EntityForType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.EntityTypeType))
	})
	return _c
}

func (_c *DeviceLocal_EntityForType_Call) Return(_a0 api.EntityLocal) *DeviceLocal_EntityForType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_EntityForType_Call) RunAndReturn(run func(model.EntityTypeType) api.EntityLocal) *DeviceLocal_EntityForType_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureByAddress provides a mock function with given fields: address
func (_m *DeviceLocal) FeatureByAddress(address *model.FeatureAddressType) api.FeatureLocal {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for FeatureByAddress")
	}

	var r0 api.FeatureLocal
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) api.FeatureLocal); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureLocal)
		}
	}

	return r0
}

// DeviceLocal_FeatureByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureByAddress'
type DeviceLocal_FeatureByAddress_Call struct {
	*mock.Call
}

// FeatureByAddress is a helper method to define mock.On call
//   - address *model.FeatureAddressType
func (_e *DeviceLocal_Expecter) FeatureByAddress(address interface{}) *DeviceLocal_FeatureByAddress_Call {
	return &DeviceLocal_FeatureByAddress_Call{Call: _e.mock.On("FeatureByAddress", address)}
}

func (_c *DeviceLocal_FeatureByAddress_Call) Run(run func(address *model.FeatureAddressType)) *DeviceLocal_FeatureByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *DeviceLocal_FeatureByAddress_Call) Return(_a0 api.FeatureLocal) *DeviceLocal_FeatureByAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_FeatureByAddress_Call) RunAndReturn(run func(*model.FeatureAddressType) api.FeatureLocal) *DeviceLocal_FeatureByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureSet provides a mock function with given fields:
func (_m *DeviceLocal) FeatureSet() *model.NetworkManagementFeatureSetType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeatureSet")
	}

	var r0 *model.NetworkManagementFeatureSetType
	if rf, ok := ret.Get(0).(func() *model.NetworkManagementFeatureSetType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NetworkManagementFeatureSetType)
		}
	}

	return r0
}

// DeviceLocal_FeatureSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureSet'
type DeviceLocal_FeatureSet_Call struct {
	*mock.Call
}

// FeatureSet is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) FeatureSet() *DeviceLocal_FeatureSet_Call {
	return &DeviceLocal_FeatureSet_Call{Call: _e.mock.On("FeatureSet")}
}

func (_c *DeviceLocal_FeatureSet_Call) Run(run func()) *DeviceLocal_FeatureSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_FeatureSet_Call) Return(_a0 *model.NetworkManagementFeatureSetType) *DeviceLocal_FeatureSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_FeatureSet_Call) RunAndReturn(run func() *model.NetworkManagementFeatureSetType) *DeviceLocal_FeatureSet_Call {
	_c.Call.Return(run)
	return _c
}

// HeartbeatManager provides a mock function with given fields:
func (_m *DeviceLocal) HeartbeatManager() api.HeartbeatManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeartbeatManager")
	}

	var r0 api.HeartbeatManager
	if rf, ok := ret.Get(0).(func() api.HeartbeatManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.HeartbeatManager)
		}
	}

	return r0
}

// DeviceLocal_HeartbeatManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeartbeatManager'
type DeviceLocal_HeartbeatManager_Call struct {
	*mock.Call
}

// HeartbeatManager is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) HeartbeatManager() *DeviceLocal_HeartbeatManager_Call {
	return &DeviceLocal_HeartbeatManager_Call{Call: _e.mock.On("HeartbeatManager")}
}

func (_c *DeviceLocal_HeartbeatManager_Call) Run(run func()) *DeviceLocal_HeartbeatManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_HeartbeatManager_Call) Return(_a0 api.HeartbeatManager) *DeviceLocal_HeartbeatManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_HeartbeatManager_Call) RunAndReturn(run func() api.HeartbeatManager) *DeviceLocal_HeartbeatManager_Call {
	_c.Call.Return(run)
	return _c
}

// Information provides a mock function with given fields:
func (_m *DeviceLocal) Information() *model.NodeManagementDetailedDiscoveryDeviceInformationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Information")
	}

	var r0 *model.NodeManagementDetailedDiscoveryDeviceInformationType
	if rf, ok := ret.Get(0).(func() *model.NodeManagementDetailedDiscoveryDeviceInformationType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NodeManagementDetailedDiscoveryDeviceInformationType)
		}
	}

	return r0
}

// DeviceLocal_Information_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Information'
type DeviceLocal_Information_Call struct {
	*mock.Call
}

// Information is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) Information() *DeviceLocal_Information_Call {
	return &DeviceLocal_Information_Call{Call: _e.mock.On("Information")}
}

func (_c *DeviceLocal_Information_Call) Run(run func()) *DeviceLocal_Information_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_Information_Call) Return(_a0 *model.NodeManagementDetailedDiscoveryDeviceInformationType) *DeviceLocal_Information_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_Information_Call) RunAndReturn(run func() *model.NodeManagementDetailedDiscoveryDeviceInformationType) *DeviceLocal_Information_Call {
	_c.Call.Return(run)
	return _c
}

// NodeManagement provides a mock function with given fields:
func (_m *DeviceLocal) NodeManagement() api.NodeManagement {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeManagement")
	}

	var r0 api.NodeManagement
	if rf, ok := ret.Get(0).(func() api.NodeManagement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.NodeManagement)
		}
	}

	return r0
}

// DeviceLocal_NodeManagement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeManagement'
type DeviceLocal_NodeManagement_Call struct {
	*mock.Call
}

// NodeManagement is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) NodeManagement() *DeviceLocal_NodeManagement_Call {
	return &DeviceLocal_NodeManagement_Call{Call: _e.mock.On("NodeManagement")}
}

func (_c *DeviceLocal_NodeManagement_Call) Run(run func()) *DeviceLocal_NodeManagement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_NodeManagement_Call) Return(_a0 api.NodeManagement) *DeviceLocal_NodeManagement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_NodeManagement_Call) RunAndReturn(run func() api.NodeManagement) *DeviceLocal_NodeManagement_Call {
	_c.Call.Return(run)
	return _c
}

// NotifySubscribers provides a mock function with given fields: featureAddress, cmd
func (_m *DeviceLocal) NotifySubscribers(featureAddress *model.FeatureAddressType, cmd model.CmdType) {
	_m.Called(featureAddress, cmd)
}

// DeviceLocal_NotifySubscribers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifySubscribers'
type DeviceLocal_NotifySubscribers_Call struct {
	*mock.Call
}

// NotifySubscribers is a helper method to define mock.On call
//   - featureAddress *model.FeatureAddressType
//   - cmd model.CmdType
func (_e *DeviceLocal_Expecter) NotifySubscribers(featureAddress interface{}, cmd interface{}) *DeviceLocal_NotifySubscribers_Call {
	return &DeviceLocal_NotifySubscribers_Call{Call: _e.mock.On("NotifySubscribers", featureAddress, cmd)}
}

func (_c *DeviceLocal_NotifySubscribers_Call) Run(run func(featureAddress *model.FeatureAddressType, cmd model.CmdType)) *DeviceLocal_NotifySubscribers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType), args[1].(model.CmdType))
	})
	return _c
}

func (_c *DeviceLocal_NotifySubscribers_Call) Return() *DeviceLocal_NotifySubscribers_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_NotifySubscribers_Call) RunAndReturn(run func(*model.FeatureAddressType, model.CmdType)) *DeviceLocal_NotifySubscribers_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessCmd provides a mock function with given fields: datagram, remoteDevice
func (_m *DeviceLocal) ProcessCmd(datagram model.DatagramType, remoteDevice api.DeviceRemote) error {
	ret := _m.Called(datagram, remoteDevice)

	if len(ret) == 0 {
		panic("no return value specified for ProcessCmd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DatagramType, api.DeviceRemote) error); ok {
		r0 = rf(datagram, remoteDevice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceLocal_ProcessCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessCmd'
type DeviceLocal_ProcessCmd_Call struct {
	*mock.Call
}

// ProcessCmd is a helper method to define mock.On call
//   - datagram model.DatagramType
//   - remoteDevice api.DeviceRemote
func (_e *DeviceLocal_Expecter) ProcessCmd(datagram interface{}, remoteDevice interface{}) *DeviceLocal_ProcessCmd_Call {
	return &DeviceLocal_ProcessCmd_Call{Call: _e.mock.On("ProcessCmd", datagram, remoteDevice)}
}

func (_c *DeviceLocal_ProcessCmd_Call) Run(run func(datagram model.DatagramType, remoteDevice api.DeviceRemote)) *DeviceLocal_ProcessCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DatagramType), args[1].(api.DeviceRemote))
	})
	return _c
}

func (_c *DeviceLocal_ProcessCmd_Call) Return(_a0 error) *DeviceLocal_ProcessCmd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_ProcessCmd_Call) RunAndReturn(run func(model.DatagramType, api.DeviceRemote) error) *DeviceLocal_ProcessCmd_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteDeviceForAddress provides a mock function with given fields: address
func (_m *DeviceLocal) RemoteDeviceForAddress(address model.AddressDeviceType) api.DeviceRemote {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for RemoteDeviceForAddress")
	}

	var r0 api.DeviceRemote
	if rf, ok := ret.Get(0).(func(model.AddressDeviceType) api.DeviceRemote); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceRemote)
		}
	}

	return r0
}

// DeviceLocal_RemoteDeviceForAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteDeviceForAddress'
type DeviceLocal_RemoteDeviceForAddress_Call struct {
	*mock.Call
}

// RemoteDeviceForAddress is a helper method to define mock.On call
//   - address model.AddressDeviceType
func (_e *DeviceLocal_Expecter) RemoteDeviceForAddress(address interface{}) *DeviceLocal_RemoteDeviceForAddress_Call {
	return &DeviceLocal_RemoteDeviceForAddress_Call{Call: _e.mock.On("RemoteDeviceForAddress", address)}
}

func (_c *DeviceLocal_RemoteDeviceForAddress_Call) Run(run func(address model.AddressDeviceType)) *DeviceLocal_RemoteDeviceForAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.AddressDeviceType))
	})
	return _c
}

func (_c *DeviceLocal_RemoteDeviceForAddress_Call) Return(_a0 api.DeviceRemote) *DeviceLocal_RemoteDeviceForAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_RemoteDeviceForAddress_Call) RunAndReturn(run func(model.AddressDeviceType) api.DeviceRemote) *DeviceLocal_RemoteDeviceForAddress_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteDeviceForSki provides a mock function with given fields: ski
func (_m *DeviceLocal) RemoteDeviceForSki(ski string) api.DeviceRemote {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for RemoteDeviceForSki")
	}

	var r0 api.DeviceRemote
	if rf, ok := ret.Get(0).(func(string) api.DeviceRemote); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceRemote)
		}
	}

	return r0
}

// DeviceLocal_RemoteDeviceForSki_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteDeviceForSki'
type DeviceLocal_RemoteDeviceForSki_Call struct {
	*mock.Call
}

// RemoteDeviceForSki is a helper method to define mock.On call
//   - ski string
func (_e *DeviceLocal_Expecter) RemoteDeviceForSki(ski interface{}) *DeviceLocal_RemoteDeviceForSki_Call {
	return &DeviceLocal_RemoteDeviceForSki_Call{Call: _e.mock.On("RemoteDeviceForSki", ski)}
}

func (_c *DeviceLocal_RemoteDeviceForSki_Call) Run(run func(ski string)) *DeviceLocal_RemoteDeviceForSki_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DeviceLocal_RemoteDeviceForSki_Call) Return(_a0 api.DeviceRemote) *DeviceLocal_RemoteDeviceForSki_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_RemoteDeviceForSki_Call) RunAndReturn(run func(string) api.DeviceRemote) *DeviceLocal_RemoteDeviceForSki_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteDevices provides a mock function with given fields:
func (_m *DeviceLocal) RemoteDevices() []api.DeviceRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteDevices")
	}

	var r0 []api.DeviceRemote
	if rf, ok := ret.Get(0).(func() []api.DeviceRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.DeviceRemote)
		}
	}

	return r0
}

// DeviceLocal_RemoteDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteDevices'
type DeviceLocal_RemoteDevices_Call struct {
	*mock.Call
}

// RemoteDevices is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) RemoteDevices() *DeviceLocal_RemoteDevices_Call {
	return &DeviceLocal_RemoteDevices_Call{Call: _e.mock.On("RemoteDevices")}
}

func (_c *DeviceLocal_RemoteDevices_Call) Run(run func()) *DeviceLocal_RemoteDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_RemoteDevices_Call) Return(_a0 []api.DeviceRemote) *DeviceLocal_RemoteDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_RemoteDevices_Call) RunAndReturn(run func() []api.DeviceRemote) *DeviceLocal_RemoteDevices_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntity provides a mock function with given fields: entity
func (_m *DeviceLocal) RemoveEntity(entity api.EntityLocal) {
	_m.Called(entity)
}

// DeviceLocal_RemoveEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntity'
type DeviceLocal_RemoveEntity_Call struct {
	*mock.Call
}

// RemoveEntity is a helper method to define mock.On call
//   - entity api.EntityLocal
func (_e *DeviceLocal_Expecter) RemoveEntity(entity interface{}) *DeviceLocal_RemoveEntity_Call {
	return &DeviceLocal_RemoveEntity_Call{Call: _e.mock.On("RemoveEntity", entity)}
}

func (_c *DeviceLocal_RemoveEntity_Call) Run(run func(entity api.EntityLocal)) *DeviceLocal_RemoveEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityLocal))
	})
	return _c
}

func (_c *DeviceLocal_RemoveEntity_Call) Return() *DeviceLocal_RemoveEntity_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_RemoveEntity_Call) RunAndReturn(run func(api.EntityLocal)) *DeviceLocal_RemoveEntity_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRemoteDevice provides a mock function with given fields: ski
func (_m *DeviceLocal) RemoveRemoteDevice(ski string) {
	_m.Called(ski)
}

// DeviceLocal_RemoveRemoteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRemoteDevice'
type DeviceLocal_RemoveRemoteDevice_Call struct {
	*mock.Call
}

// RemoveRemoteDevice is a helper method to define mock.On call
//   - ski string
func (_e *DeviceLocal_Expecter) RemoveRemoteDevice(ski interface{}) *DeviceLocal_RemoveRemoteDevice_Call {
	return &DeviceLocal_RemoveRemoteDevice_Call{Call: _e.mock.On("RemoveRemoteDevice", ski)}
}

func (_c *DeviceLocal_RemoveRemoteDevice_Call) Run(run func(ski string)) *DeviceLocal_RemoveRemoteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DeviceLocal_RemoveRemoteDevice_Call) Return() *DeviceLocal_RemoveRemoteDevice_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_RemoveRemoteDevice_Call) RunAndReturn(run func(string)) *DeviceLocal_RemoveRemoteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRemoteDeviceConnection provides a mock function with given fields: ski
func (_m *DeviceLocal) RemoveRemoteDeviceConnection(ski string) {
	_m.Called(ski)
}

// DeviceLocal_RemoveRemoteDeviceConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRemoteDeviceConnection'
type DeviceLocal_RemoveRemoteDeviceConnection_Call struct {
	*mock.Call
}

// RemoveRemoteDeviceConnection is a helper method to define mock.On call
//   - ski string
func (_e *DeviceLocal_Expecter) RemoveRemoteDeviceConnection(ski interface{}) *DeviceLocal_RemoveRemoteDeviceConnection_Call {
	return &DeviceLocal_RemoveRemoteDeviceConnection_Call{Call: _e.mock.On("RemoveRemoteDeviceConnection", ski)}
}

func (_c *DeviceLocal_RemoveRemoteDeviceConnection_Call) Run(run func(ski string)) *DeviceLocal_RemoveRemoteDeviceConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DeviceLocal_RemoveRemoteDeviceConnection_Call) Return() *DeviceLocal_RemoveRemoteDeviceConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeviceLocal_RemoveRemoteDeviceConnection_Call) RunAndReturn(run func(string)) *DeviceLocal_RemoveRemoteDeviceConnection_Call {
	_c.Call.Return(run)
	return _c
}

// SetupRemoteDevice provides a mock function with given fields: ski, writeI
func (_m *DeviceLocal) SetupRemoteDevice(ski string, writeI ship_goapi.SpineDataConnection) ship_goapi.SpineDataProcessing {
	ret := _m.Called(ski, writeI)

	if len(ret) == 0 {
		panic("no return value specified for SetupRemoteDevice")
	}

	var r0 ship_goapi.SpineDataProcessing
	if rf, ok := ret.Get(0).(func(string, ship_goapi.SpineDataConnection) ship_goapi.SpineDataProcessing); ok {
		r0 = rf(ski, writeI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ship_goapi.SpineDataProcessing)
		}
	}

	return r0
}

// DeviceLocal_SetupRemoteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupRemoteDevice'
type DeviceLocal_SetupRemoteDevice_Call struct {
	*mock.Call
}

// SetupRemoteDevice is a helper method to define mock.On call
//   - ski string
//   - writeI ship_goapi.SpineDataConnection
func (_e *DeviceLocal_Expecter) SetupRemoteDevice(ski interface{}, writeI interface{}) *DeviceLocal_SetupRemoteDevice_Call {
	return &DeviceLocal_SetupRemoteDevice_Call{Call: _e.mock.On("SetupRemoteDevice", ski, writeI)}
}

func (_c *DeviceLocal_SetupRemoteDevice_Call) Run(run func(ski string, writeI ship_goapi.SpineDataConnection)) *DeviceLocal_SetupRemoteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ship_goapi.SpineDataConnection))
	})
	return _c
}

func (_c *DeviceLocal_SetupRemoteDevice_Call) Return(_a0 ship_goapi.SpineDataProcessing) *DeviceLocal_SetupRemoteDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_SetupRemoteDevice_Call) RunAndReturn(run func(string, ship_goapi.SpineDataConnection) ship_goapi.SpineDataProcessing) *DeviceLocal_SetupRemoteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// SubscriptionManager provides a mock function with given fields:
func (_m *DeviceLocal) SubscriptionManager() api.SubscriptionManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionManager")
	}

	var r0 api.SubscriptionManager
	if rf, ok := ret.Get(0).(func() api.SubscriptionManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SubscriptionManager)
		}
	}

	return r0
}

// DeviceLocal_SubscriptionManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscriptionManager'
type DeviceLocal_SubscriptionManager_Call struct {
	*mock.Call
}

// SubscriptionManager is a helper method to define mock.On call
func (_e *DeviceLocal_Expecter) SubscriptionManager() *DeviceLocal_SubscriptionManager_Call {
	return &DeviceLocal_SubscriptionManager_Call{Call: _e.mock.On("SubscriptionManager")}
}

func (_c *DeviceLocal_SubscriptionManager_Call) Run(run func()) *DeviceLocal_SubscriptionManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeviceLocal_SubscriptionManager_Call) Return(_a0 api.SubscriptionManager) *DeviceLocal_SubscriptionManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeviceLocal_SubscriptionManager_Call) RunAndReturn(run func() api.SubscriptionManager) *DeviceLocal_SubscriptionManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeviceLocal creates a new instance of DeviceLocal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceLocal(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceLocal {
	mock := &DeviceLocal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

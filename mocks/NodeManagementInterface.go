// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// NodeManagementInterface is an autogenerated mock type for the NodeManagementInterface type
type NodeManagementInterface struct {
	mock.Mock
}

type NodeManagementInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeManagementInterface) EXPECT() *NodeManagementInterface_Expecter {
	return &NodeManagementInterface_Expecter{mock: &_m.Mock}
}

// AddFunctionType provides a mock function with given fields: function, read, write
func (_m *NodeManagementInterface) AddFunctionType(function model.FunctionType, read bool, write bool) {
	_m.Called(function, read, write)
}

// NodeManagementInterface_AddFunctionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunctionType'
type NodeManagementInterface_AddFunctionType_Call struct {
	*mock.Call
}

// AddFunctionType is a helper method to define mock.On call
//   - function model.FunctionType
//   - read bool
//   - write bool
func (_e *NodeManagementInterface_Expecter) AddFunctionType(function interface{}, read interface{}, write interface{}) *NodeManagementInterface_AddFunctionType_Call {
	return &NodeManagementInterface_AddFunctionType_Call{Call: _e.mock.On("AddFunctionType", function, read, write)}
}

func (_c *NodeManagementInterface_AddFunctionType_Call) Run(run func(function model.FunctionType, read bool, write bool)) *NodeManagementInterface_AddFunctionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *NodeManagementInterface_AddFunctionType_Call) Return() *NodeManagementInterface_AddFunctionType_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_AddFunctionType_Call) RunAndReturn(run func(model.FunctionType, bool, bool)) *NodeManagementInterface_AddFunctionType_Call {
	_c.Call.Return(run)
	return _c
}

// AddResponseCallback provides a mock function with given fields: msgCounterReference, function
func (_m *NodeManagementInterface) AddResponseCallback(msgCounterReference model.MsgCounterType, function func(api.ResponseMessage)) {
	_m.Called(msgCounterReference, function)
}

// NodeManagementInterface_AddResponseCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResponseCallback'
type NodeManagementInterface_AddResponseCallback_Call struct {
	*mock.Call
}

// AddResponseCallback is a helper method to define mock.On call
//   - msgCounterReference model.MsgCounterType
//   - function func(api.ResponseMessage)
func (_e *NodeManagementInterface_Expecter) AddResponseCallback(msgCounterReference interface{}, function interface{}) *NodeManagementInterface_AddResponseCallback_Call {
	return &NodeManagementInterface_AddResponseCallback_Call{Call: _e.mock.On("AddResponseCallback", msgCounterReference, function)}
}

func (_c *NodeManagementInterface_AddResponseCallback_Call) Run(run func(msgCounterReference model.MsgCounterType, function func(api.ResponseMessage))) *NodeManagementInterface_AddResponseCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.MsgCounterType), args[1].(func(api.ResponseMessage)))
	})
	return _c
}

func (_c *NodeManagementInterface_AddResponseCallback_Call) Return() *NodeManagementInterface_AddResponseCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_AddResponseCallback_Call) RunAndReturn(run func(model.MsgCounterType, func(api.ResponseMessage))) *NodeManagementInterface_AddResponseCallback_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *NodeManagementInterface) Address() *model.FeatureAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.FeatureAddressType
	if rf, ok := ret.Get(0).(func() *model.FeatureAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FeatureAddressType)
		}
	}

	return r0
}

// NodeManagementInterface_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type NodeManagementInterface_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Address() *NodeManagementInterface_Address_Call {
	return &NodeManagementInterface_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *NodeManagementInterface_Address_Call) Run(run func()) *NodeManagementInterface_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Address_Call) Return(_a0 *model.FeatureAddressType) *NodeManagementInterface_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Address_Call) RunAndReturn(run func() *model.FeatureAddressType) *NodeManagementInterface_Address_Call {
	_c.Call.Return(run)
	return _c
}

// BindToRemote provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) BindToRemote(remoteAddress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for BindToRemote")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAddress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAddress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_BindToRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindToRemote'
type NodeManagementInterface_BindToRemote_Call struct {
	*mock.Call
}

// BindToRemote is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) BindToRemote(remoteAddress interface{}) *NodeManagementInterface_BindToRemote_Call {
	return &NodeManagementInterface_BindToRemote_Call{Call: _e.mock.On("BindToRemote", remoteAddress)}
}

func (_c *NodeManagementInterface_BindToRemote_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_BindToRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_BindToRemote_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_BindToRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_BindToRemote_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_BindToRemote_Call {
	_c.Call.Return(run)
	return _c
}

// DataCopy provides a mock function with given fields: function
func (_m *NodeManagementInterface) DataCopy(function model.FunctionType) interface{} {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for DataCopy")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(model.FunctionType) interface{}); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NodeManagementInterface_DataCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataCopy'
type NodeManagementInterface_DataCopy_Call struct {
	*mock.Call
}

// DataCopy is a helper method to define mock.On call
//   - function model.FunctionType
func (_e *NodeManagementInterface_Expecter) DataCopy(function interface{}) *NodeManagementInterface_DataCopy_Call {
	return &NodeManagementInterface_DataCopy_Call{Call: _e.mock.On("DataCopy", function)}
}

func (_c *NodeManagementInterface_DataCopy_Call) Run(run func(function model.FunctionType)) *NodeManagementInterface_DataCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType))
	})
	return _c
}

func (_c *NodeManagementInterface_DataCopy_Call) Return(_a0 interface{}) *NodeManagementInterface_DataCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_DataCopy_Call) RunAndReturn(run func(model.FunctionType) interface{}) *NodeManagementInterface_DataCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *NodeManagementInterface) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// NodeManagementInterface_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type NodeManagementInterface_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Description() *NodeManagementInterface_Description_Call {
	return &NodeManagementInterface_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *NodeManagementInterface_Description_Call) Run(run func()) *NodeManagementInterface_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Description_Call) Return(_a0 *model.DescriptionType) *NodeManagementInterface_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Description_Call) RunAndReturn(run func() *model.DescriptionType) *NodeManagementInterface_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *NodeManagementInterface) Device() api.DeviceLocalInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 api.DeviceLocalInterface
	if rf, ok := ret.Get(0).(func() api.DeviceLocalInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceLocalInterface)
		}
	}

	return r0
}

// NodeManagementInterface_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type NodeManagementInterface_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Device() *NodeManagementInterface_Device_Call {
	return &NodeManagementInterface_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *NodeManagementInterface_Device_Call) Run(run func()) *NodeManagementInterface_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Device_Call) Return(_a0 api.DeviceLocalInterface) *NodeManagementInterface_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Device_Call) RunAndReturn(run func() api.DeviceLocalInterface) *NodeManagementInterface_Device_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields:
func (_m *NodeManagementInterface) Entity() api.EntityLocalInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 api.EntityLocalInterface
	if rf, ok := ret.Get(0).(func() api.EntityLocalInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityLocalInterface)
		}
	}

	return r0
}

// NodeManagementInterface_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type NodeManagementInterface_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Entity() *NodeManagementInterface_Entity_Call {
	return &NodeManagementInterface_Entity_Call{Call: _e.mock.On("Entity")}
}

func (_c *NodeManagementInterface_Entity_Call) Run(run func()) *NodeManagementInterface_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Entity_Call) Return(_a0 api.EntityLocalInterface) *NodeManagementInterface_Entity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Entity_Call) RunAndReturn(run func() api.EntityLocalInterface) *NodeManagementInterface_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// Functions provides a mock function with given fields:
func (_m *NodeManagementInterface) Functions() []model.FunctionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Functions")
	}

	var r0 []model.FunctionType
	if rf, ok := ret.Get(0).(func() []model.FunctionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FunctionType)
		}
	}

	return r0
}

// NodeManagementInterface_Functions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Functions'
type NodeManagementInterface_Functions_Call struct {
	*mock.Call
}

// Functions is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Functions() *NodeManagementInterface_Functions_Call {
	return &NodeManagementInterface_Functions_Call{Call: _e.mock.On("Functions")}
}

func (_c *NodeManagementInterface_Functions_Call) Run(run func()) *NodeManagementInterface_Functions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Functions_Call) Return(_a0 []model.FunctionType) *NodeManagementInterface_Functions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Functions_Call) RunAndReturn(run func() []model.FunctionType) *NodeManagementInterface_Functions_Call {
	_c.Call.Return(run)
	return _c
}

// HandleMessage provides a mock function with given fields: message
func (_m *NodeManagementInterface) HandleMessage(message *api.Message) *model.ErrorType {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*api.Message) *model.ErrorType); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorType)
		}
	}

	return r0
}

// NodeManagementInterface_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type NodeManagementInterface_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - message *api.Message
func (_e *NodeManagementInterface_Expecter) HandleMessage(message interface{}) *NodeManagementInterface_HandleMessage_Call {
	return &NodeManagementInterface_HandleMessage_Call{Call: _e.mock.On("HandleMessage", message)}
}

func (_c *NodeManagementInterface_HandleMessage_Call) Run(run func(message *api.Message)) *NodeManagementInterface_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.Message))
	})
	return _c
}

func (_c *NodeManagementInterface_HandleMessage_Call) Return(_a0 *model.ErrorType) *NodeManagementInterface_HandleMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_HandleMessage_Call) RunAndReturn(run func(*api.Message) *model.ErrorType) *NodeManagementInterface_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// HasBindingToRemote provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) HasBindingToRemote(remoteAddress *model.FeatureAddressType) bool {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for HasBindingToRemote")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) bool); ok {
		r0 = rf(remoteAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeManagementInterface_HasBindingToRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasBindingToRemote'
type NodeManagementInterface_HasBindingToRemote_Call struct {
	*mock.Call
}

// HasBindingToRemote is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) HasBindingToRemote(remoteAddress interface{}) *NodeManagementInterface_HasBindingToRemote_Call {
	return &NodeManagementInterface_HasBindingToRemote_Call{Call: _e.mock.On("HasBindingToRemote", remoteAddress)}
}

func (_c *NodeManagementInterface_HasBindingToRemote_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_HasBindingToRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_HasBindingToRemote_Call) Return(_a0 bool) *NodeManagementInterface_HasBindingToRemote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_HasBindingToRemote_Call) RunAndReturn(run func(*model.FeatureAddressType) bool) *NodeManagementInterface_HasBindingToRemote_Call {
	_c.Call.Return(run)
	return _c
}

// HasSubscriptionToRemote provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) HasSubscriptionToRemote(remoteAddress *model.FeatureAddressType) bool {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for HasSubscriptionToRemote")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) bool); ok {
		r0 = rf(remoteAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeManagementInterface_HasSubscriptionToRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSubscriptionToRemote'
type NodeManagementInterface_HasSubscriptionToRemote_Call struct {
	*mock.Call
}

// HasSubscriptionToRemote is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) HasSubscriptionToRemote(remoteAddress interface{}) *NodeManagementInterface_HasSubscriptionToRemote_Call {
	return &NodeManagementInterface_HasSubscriptionToRemote_Call{Call: _e.mock.On("HasSubscriptionToRemote", remoteAddress)}
}

func (_c *NodeManagementInterface_HasSubscriptionToRemote_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_HasSubscriptionToRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_HasSubscriptionToRemote_Call) Return(_a0 bool) *NodeManagementInterface_HasSubscriptionToRemote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_HasSubscriptionToRemote_Call) RunAndReturn(run func(*model.FeatureAddressType) bool) *NodeManagementInterface_HasSubscriptionToRemote_Call {
	_c.Call.Return(run)
	return _c
}

// Information provides a mock function with given fields:
func (_m *NodeManagementInterface) Information() *model.NodeManagementDetailedDiscoveryFeatureInformationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Information")
	}

	var r0 *model.NodeManagementDetailedDiscoveryFeatureInformationType
	if rf, ok := ret.Get(0).(func() *model.NodeManagementDetailedDiscoveryFeatureInformationType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NodeManagementDetailedDiscoveryFeatureInformationType)
		}
	}

	return r0
}

// NodeManagementInterface_Information_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Information'
type NodeManagementInterface_Information_Call struct {
	*mock.Call
}

// Information is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Information() *NodeManagementInterface_Information_Call {
	return &NodeManagementInterface_Information_Call{Call: _e.mock.On("Information")}
}

func (_c *NodeManagementInterface_Information_Call) Run(run func()) *NodeManagementInterface_Information_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Information_Call) Return(_a0 *model.NodeManagementDetailedDiscoveryFeatureInformationType) *NodeManagementInterface_Information_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Information_Call) RunAndReturn(run func() *model.NodeManagementDetailedDiscoveryFeatureInformationType) *NodeManagementInterface_Information_Call {
	_c.Call.Return(run)
	return _c
}

// Operations provides a mock function with given fields:
func (_m *NodeManagementInterface) Operations() map[model.FunctionType]api.OperationsInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operations")
	}

	var r0 map[model.FunctionType]api.OperationsInterface
	if rf, ok := ret.Get(0).(func() map[model.FunctionType]api.OperationsInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.FunctionType]api.OperationsInterface)
		}
	}

	return r0
}

// NodeManagementInterface_Operations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operations'
type NodeManagementInterface_Operations_Call struct {
	*mock.Call
}

// Operations is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Operations() *NodeManagementInterface_Operations_Call {
	return &NodeManagementInterface_Operations_Call{Call: _e.mock.On("Operations")}
}

func (_c *NodeManagementInterface_Operations_Call) Run(run func()) *NodeManagementInterface_Operations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Operations_Call) Return(_a0 map[model.FunctionType]api.OperationsInterface) *NodeManagementInterface_Operations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Operations_Call) RunAndReturn(run func() map[model.FunctionType]api.OperationsInterface) *NodeManagementInterface_Operations_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllRemoteBindings provides a mock function with given fields:
func (_m *NodeManagementInterface) RemoveAllRemoteBindings() {
	_m.Called()
}

// NodeManagementInterface_RemoveAllRemoteBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllRemoteBindings'
type NodeManagementInterface_RemoveAllRemoteBindings_Call struct {
	*mock.Call
}

// RemoveAllRemoteBindings is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) RemoveAllRemoteBindings() *NodeManagementInterface_RemoveAllRemoteBindings_Call {
	return &NodeManagementInterface_RemoveAllRemoteBindings_Call{Call: _e.mock.On("RemoveAllRemoteBindings")}
}

func (_c *NodeManagementInterface_RemoveAllRemoteBindings_Call) Run(run func()) *NodeManagementInterface_RemoveAllRemoteBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_RemoveAllRemoteBindings_Call) Return() *NodeManagementInterface_RemoveAllRemoteBindings_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_RemoveAllRemoteBindings_Call) RunAndReturn(run func()) *NodeManagementInterface_RemoveAllRemoteBindings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllRemoteSubscriptions provides a mock function with given fields:
func (_m *NodeManagementInterface) RemoveAllRemoteSubscriptions() {
	_m.Called()
}

// NodeManagementInterface_RemoveAllRemoteSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllRemoteSubscriptions'
type NodeManagementInterface_RemoveAllRemoteSubscriptions_Call struct {
	*mock.Call
}

// RemoveAllRemoteSubscriptions is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) RemoveAllRemoteSubscriptions() *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call {
	return &NodeManagementInterface_RemoveAllRemoteSubscriptions_Call{Call: _e.mock.On("RemoveAllRemoteSubscriptions")}
}

func (_c *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call) Run(run func()) *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call) Return() *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call) RunAndReturn(run func()) *NodeManagementInterface_RemoveAllRemoteSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRemoteBinding provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) RemoveRemoteBinding(remoteAddress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRemoteBinding")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAddress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAddress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_RemoveRemoteBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRemoteBinding'
type NodeManagementInterface_RemoveRemoteBinding_Call struct {
	*mock.Call
}

// RemoveRemoteBinding is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) RemoveRemoteBinding(remoteAddress interface{}) *NodeManagementInterface_RemoveRemoteBinding_Call {
	return &NodeManagementInterface_RemoveRemoteBinding_Call{Call: _e.mock.On("RemoveRemoteBinding", remoteAddress)}
}

func (_c *NodeManagementInterface_RemoveRemoteBinding_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_RemoveRemoteBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_RemoveRemoteBinding_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_RemoveRemoteBinding_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_RemoveRemoteBinding_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_RemoveRemoteBinding_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRemoteSubscription provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) RemoveRemoteSubscription(remoteAddress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRemoteSubscription")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAddress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAddress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_RemoveRemoteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRemoteSubscription'
type NodeManagementInterface_RemoveRemoteSubscription_Call struct {
	*mock.Call
}

// RemoveRemoteSubscription is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) RemoveRemoteSubscription(remoteAddress interface{}) *NodeManagementInterface_RemoveRemoteSubscription_Call {
	return &NodeManagementInterface_RemoveRemoteSubscription_Call{Call: _e.mock.On("RemoveRemoteSubscription", remoteAddress)}
}

func (_c *NodeManagementInterface_RemoveRemoteSubscription_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_RemoveRemoteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_RemoveRemoteSubscription_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_RemoveRemoteSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_RemoveRemoteSubscription_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_RemoveRemoteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RequestRemoteData provides a mock function with given fields: function, selector, elements, destination
func (_m *NodeManagementInterface) RequestRemoteData(function model.FunctionType, selector interface{}, elements interface{}, destination api.FeatureRemoteInterface) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(function, selector, elements, destination)

	if len(ret) == 0 {
		panic("no return value specified for RequestRemoteData")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemoteInterface) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(function, selector, elements, destination)
	}
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemoteInterface) *model.MsgCounterType); ok {
		r0 = rf(function, selector, elements, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemoteInterface) *model.ErrorType); ok {
		r1 = rf(function, selector, elements, destination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_RequestRemoteData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRemoteData'
type NodeManagementInterface_RequestRemoteData_Call struct {
	*mock.Call
}

// RequestRemoteData is a helper method to define mock.On call
//   - function model.FunctionType
//   - selector interface{}
//   - elements interface{}
//   - destination api.FeatureRemoteInterface
func (_e *NodeManagementInterface_Expecter) RequestRemoteData(function interface{}, selector interface{}, elements interface{}, destination interface{}) *NodeManagementInterface_RequestRemoteData_Call {
	return &NodeManagementInterface_RequestRemoteData_Call{Call: _e.mock.On("RequestRemoteData", function, selector, elements, destination)}
}

func (_c *NodeManagementInterface_RequestRemoteData_Call) Run(run func(function model.FunctionType, selector interface{}, elements interface{}, destination api.FeatureRemoteInterface)) *NodeManagementInterface_RequestRemoteData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}), args[2].(interface{}), args[3].(api.FeatureRemoteInterface))
	})
	return _c
}

func (_c *NodeManagementInterface_RequestRemoteData_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_RequestRemoteData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_RequestRemoteData_Call) RunAndReturn(run func(model.FunctionType, interface{}, interface{}, api.FeatureRemoteInterface) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_RequestRemoteData_Call {
	_c.Call.Return(run)
	return _c
}

// RequestRemoteDataBySenderAddress provides a mock function with given fields: cmd, sender, destinationSki, destinationAddress, maxDelay
func (_m *NodeManagementInterface) RequestRemoteDataBySenderAddress(cmd model.CmdType, sender api.SenderInterface, destinationSki string, destinationAddress *model.FeatureAddressType, maxDelay time.Duration) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(cmd, sender, destinationSki, destinationAddress, maxDelay)

	if len(ret) == 0 {
		panic("no return value specified for RequestRemoteDataBySenderAddress")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.CmdType, api.SenderInterface, string, *model.FeatureAddressType, time.Duration) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	}
	if rf, ok := ret.Get(0).(func(model.CmdType, api.SenderInterface, string, *model.FeatureAddressType, time.Duration) *model.MsgCounterType); ok {
		r0 = rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CmdType, api.SenderInterface, string, *model.FeatureAddressType, time.Duration) *model.ErrorType); ok {
		r1 = rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_RequestRemoteDataBySenderAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRemoteDataBySenderAddress'
type NodeManagementInterface_RequestRemoteDataBySenderAddress_Call struct {
	*mock.Call
}

// RequestRemoteDataBySenderAddress is a helper method to define mock.On call
//   - cmd model.CmdType
//   - sender api.SenderInterface
//   - destinationSki string
//   - destinationAddress *model.FeatureAddressType
//   - maxDelay time.Duration
func (_e *NodeManagementInterface_Expecter) RequestRemoteDataBySenderAddress(cmd interface{}, sender interface{}, destinationSki interface{}, destinationAddress interface{}, maxDelay interface{}) *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call {
	return &NodeManagementInterface_RequestRemoteDataBySenderAddress_Call{Call: _e.mock.On("RequestRemoteDataBySenderAddress", cmd, sender, destinationSki, destinationAddress, maxDelay)}
}

func (_c *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call) Run(run func(cmd model.CmdType, sender api.SenderInterface, destinationSki string, destinationAddress *model.FeatureAddressType, maxDelay time.Duration)) *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.CmdType), args[1].(api.SenderInterface), args[2].(string), args[3].(*model.FeatureAddressType), args[4].(time.Duration))
	})
	return _c
}

func (_c *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call) RunAndReturn(run func(model.CmdType, api.SenderInterface, string, *model.FeatureAddressType, time.Duration) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_RequestRemoteDataBySenderAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *NodeManagementInterface) Role() model.RoleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 model.RoleType
	if rf, ok := ret.Get(0).(func() model.RoleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RoleType)
	}

	return r0
}

// NodeManagementInterface_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type NodeManagementInterface_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Role() *NodeManagementInterface_Role_Call {
	return &NodeManagementInterface_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *NodeManagementInterface_Role_Call) Run(run func()) *NodeManagementInterface_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Role_Call) Return(_a0 model.RoleType) *NodeManagementInterface_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Role_Call) RunAndReturn(run func() model.RoleType) *NodeManagementInterface_Role_Call {
	_c.Call.Return(run)
	return _c
}

// SetData provides a mock function with given fields: function, data
func (_m *NodeManagementInterface) SetData(function model.FunctionType, data interface{}) {
	_m.Called(function, data)
}

// NodeManagementInterface_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type NodeManagementInterface_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - function model.FunctionType
//   - data interface{}
func (_e *NodeManagementInterface_Expecter) SetData(function interface{}, data interface{}) *NodeManagementInterface_SetData_Call {
	return &NodeManagementInterface_SetData_Call{Call: _e.mock.On("SetData", function, data)}
}

func (_c *NodeManagementInterface_SetData_Call) Run(run func(function model.FunctionType, data interface{})) *NodeManagementInterface_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}))
	})
	return _c
}

func (_c *NodeManagementInterface_SetData_Call) Return() *NodeManagementInterface_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_SetData_Call) RunAndReturn(run func(model.FunctionType, interface{})) *NodeManagementInterface_SetData_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: desc
func (_m *NodeManagementInterface) SetDescription(desc *model.DescriptionType) {
	_m.Called(desc)
}

// NodeManagementInterface_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type NodeManagementInterface_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - desc *model.DescriptionType
func (_e *NodeManagementInterface_Expecter) SetDescription(desc interface{}) *NodeManagementInterface_SetDescription_Call {
	return &NodeManagementInterface_SetDescription_Call{Call: _e.mock.On("SetDescription", desc)}
}

func (_c *NodeManagementInterface_SetDescription_Call) Run(run func(desc *model.DescriptionType)) *NodeManagementInterface_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *NodeManagementInterface_SetDescription_Call) Return() *NodeManagementInterface_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *NodeManagementInterface_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescriptionString provides a mock function with given fields: s
func (_m *NodeManagementInterface) SetDescriptionString(s string) {
	_m.Called(s)
}

// NodeManagementInterface_SetDescriptionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescriptionString'
type NodeManagementInterface_SetDescriptionString_Call struct {
	*mock.Call
}

// SetDescriptionString is a helper method to define mock.On call
//   - s string
func (_e *NodeManagementInterface_Expecter) SetDescriptionString(s interface{}) *NodeManagementInterface_SetDescriptionString_Call {
	return &NodeManagementInterface_SetDescriptionString_Call{Call: _e.mock.On("SetDescriptionString", s)}
}

func (_c *NodeManagementInterface_SetDescriptionString_Call) Run(run func(s string)) *NodeManagementInterface_SetDescriptionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NodeManagementInterface_SetDescriptionString_Call) Return() *NodeManagementInterface_SetDescriptionString_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeManagementInterface_SetDescriptionString_Call) RunAndReturn(run func(string)) *NodeManagementInterface_SetDescriptionString_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *NodeManagementInterface) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NodeManagementInterface_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type NodeManagementInterface_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) String() *NodeManagementInterface_String_Call {
	return &NodeManagementInterface_String_Call{Call: _e.mock.On("String")}
}

func (_c *NodeManagementInterface_String_Call) Run(run func()) *NodeManagementInterface_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_String_Call) Return(_a0 string) *NodeManagementInterface_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_String_Call) RunAndReturn(run func() string) *NodeManagementInterface_String_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToRemote provides a mock function with given fields: remoteAddress
func (_m *NodeManagementInterface) SubscribeToRemote(remoteAddress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAddress)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToRemote")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAddress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAddress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// NodeManagementInterface_SubscribeToRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToRemote'
type NodeManagementInterface_SubscribeToRemote_Call struct {
	*mock.Call
}

// SubscribeToRemote is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *NodeManagementInterface_Expecter) SubscribeToRemote(remoteAddress interface{}) *NodeManagementInterface_SubscribeToRemote_Call {
	return &NodeManagementInterface_SubscribeToRemote_Call{Call: _e.mock.On("SubscribeToRemote", remoteAddress)}
}

func (_c *NodeManagementInterface_SubscribeToRemote_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *NodeManagementInterface_SubscribeToRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *NodeManagementInterface_SubscribeToRemote_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *NodeManagementInterface_SubscribeToRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeManagementInterface_SubscribeToRemote_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *NodeManagementInterface_SubscribeToRemote_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *NodeManagementInterface) Type() model.FeatureTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 model.FeatureTypeType
	if rf, ok := ret.Get(0).(func() model.FeatureTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FeatureTypeType)
	}

	return r0
}

// NodeManagementInterface_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type NodeManagementInterface_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *NodeManagementInterface_Expecter) Type() *NodeManagementInterface_Type_Call {
	return &NodeManagementInterface_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *NodeManagementInterface_Type_Call) Run(run func()) *NodeManagementInterface_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeManagementInterface_Type_Call) Return(_a0 model.FeatureTypeType) *NodeManagementInterface_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeManagementInterface_Type_Call) RunAndReturn(run func() model.FeatureTypeType) *NodeManagementInterface_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeManagementInterface creates a new instance of NodeManagementInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeManagementInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeManagementInterface {
	mock := &NodeManagementInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

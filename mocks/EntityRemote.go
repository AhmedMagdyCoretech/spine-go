// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// EntityRemote is an autogenerated mock type for the EntityRemote type
type EntityRemote struct {
	mock.Mock
}

type EntityRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *EntityRemote) EXPECT() *EntityRemote_Expecter {
	return &EntityRemote_Expecter{mock: &_m.Mock}
}

// AddFeature provides a mock function with given fields: f
func (_m *EntityRemote) AddFeature(f api.FeatureRemote) {
	_m.Called(f)
}

// EntityRemote_AddFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeature'
type EntityRemote_AddFeature_Call struct {
	*mock.Call
}

// AddFeature is a helper method to define mock.On call
//   - f api.FeatureRemote
func (_e *EntityRemote_Expecter) AddFeature(f interface{}) *EntityRemote_AddFeature_Call {
	return &EntityRemote_AddFeature_Call{Call: _e.mock.On("AddFeature", f)}
}

func (_c *EntityRemote_AddFeature_Call) Run(run func(f api.FeatureRemote)) *EntityRemote_AddFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.FeatureRemote))
	})
	return _c
}

func (_c *EntityRemote_AddFeature_Call) Return() *EntityRemote_AddFeature_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityRemote_AddFeature_Call) RunAndReturn(run func(api.FeatureRemote)) *EntityRemote_AddFeature_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *EntityRemote) Address() *model.EntityAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.EntityAddressType
	if rf, ok := ret.Get(0).(func() *model.EntityAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EntityAddressType)
		}
	}

	return r0
}

// EntityRemote_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type EntityRemote_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) Address() *EntityRemote_Address_Call {
	return &EntityRemote_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *EntityRemote_Address_Call) Run(run func()) *EntityRemote_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_Address_Call) Return(_a0 *model.EntityAddressType) *EntityRemote_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_Address_Call) RunAndReturn(run func() *model.EntityAddressType) *EntityRemote_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *EntityRemote) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// EntityRemote_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type EntityRemote_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) Description() *EntityRemote_Description_Call {
	return &EntityRemote_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *EntityRemote_Description_Call) Run(run func()) *EntityRemote_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_Description_Call) Return(_a0 *model.DescriptionType) *EntityRemote_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_Description_Call) RunAndReturn(run func() *model.DescriptionType) *EntityRemote_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *EntityRemote) Device() api.DeviceRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 api.DeviceRemote
	if rf, ok := ret.Get(0).(func() api.DeviceRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceRemote)
		}
	}

	return r0
}

// EntityRemote_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type EntityRemote_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) Device() *EntityRemote_Device_Call {
	return &EntityRemote_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *EntityRemote_Device_Call) Run(run func()) *EntityRemote_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_Device_Call) Return(_a0 api.DeviceRemote) *EntityRemote_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_Device_Call) RunAndReturn(run func() api.DeviceRemote) *EntityRemote_Device_Call {
	_c.Call.Return(run)
	return _c
}

// EntityType provides a mock function with given fields:
func (_m *EntityRemote) EntityType() model.EntityTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EntityType")
	}

	var r0 model.EntityTypeType
	if rf, ok := ret.Get(0).(func() model.EntityTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.EntityTypeType)
	}

	return r0
}

// EntityRemote_EntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntityType'
type EntityRemote_EntityType_Call struct {
	*mock.Call
}

// EntityType is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) EntityType() *EntityRemote_EntityType_Call {
	return &EntityRemote_EntityType_Call{Call: _e.mock.On("EntityType")}
}

func (_c *EntityRemote_EntityType_Call) Run(run func()) *EntityRemote_EntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_EntityType_Call) Return(_a0 model.EntityTypeType) *EntityRemote_EntityType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_EntityType_Call) RunAndReturn(run func() model.EntityTypeType) *EntityRemote_EntityType_Call {
	_c.Call.Return(run)
	return _c
}

// Feature provides a mock function with given fields: addressFeature
func (_m *EntityRemote) Feature(addressFeature *model.AddressFeatureType) api.FeatureRemote {
	ret := _m.Called(addressFeature)

	if len(ret) == 0 {
		panic("no return value specified for Feature")
	}

	var r0 api.FeatureRemote
	if rf, ok := ret.Get(0).(func(*model.AddressFeatureType) api.FeatureRemote); ok {
		r0 = rf(addressFeature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureRemote)
		}
	}

	return r0
}

// EntityRemote_Feature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feature'
type EntityRemote_Feature_Call struct {
	*mock.Call
}

// Feature is a helper method to define mock.On call
//   - addressFeature *model.AddressFeatureType
func (_e *EntityRemote_Expecter) Feature(addressFeature interface{}) *EntityRemote_Feature_Call {
	return &EntityRemote_Feature_Call{Call: _e.mock.On("Feature", addressFeature)}
}

func (_c *EntityRemote_Feature_Call) Run(run func(addressFeature *model.AddressFeatureType)) *EntityRemote_Feature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.AddressFeatureType))
	})
	return _c
}

func (_c *EntityRemote_Feature_Call) Return(_a0 api.FeatureRemote) *EntityRemote_Feature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_Feature_Call) RunAndReturn(run func(*model.AddressFeatureType) api.FeatureRemote) *EntityRemote_Feature_Call {
	_c.Call.Return(run)
	return _c
}

// Features provides a mock function with given fields:
func (_m *EntityRemote) Features() []api.FeatureRemote {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Features")
	}

	var r0 []api.FeatureRemote
	if rf, ok := ret.Get(0).(func() []api.FeatureRemote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.FeatureRemote)
		}
	}

	return r0
}

// EntityRemote_Features_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Features'
type EntityRemote_Features_Call struct {
	*mock.Call
}

// Features is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) Features() *EntityRemote_Features_Call {
	return &EntityRemote_Features_Call{Call: _e.mock.On("Features")}
}

func (_c *EntityRemote_Features_Call) Run(run func()) *EntityRemote_Features_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_Features_Call) Return(_a0 []api.FeatureRemote) *EntityRemote_Features_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_Features_Call) RunAndReturn(run func() []api.FeatureRemote) *EntityRemote_Features_Call {
	_c.Call.Return(run)
	return _c
}

// NextFeatureId provides a mock function with given fields:
func (_m *EntityRemote) NextFeatureId() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextFeatureId")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// EntityRemote_NextFeatureId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextFeatureId'
type EntityRemote_NextFeatureId_Call struct {
	*mock.Call
}

// NextFeatureId is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) NextFeatureId() *EntityRemote_NextFeatureId_Call {
	return &EntityRemote_NextFeatureId_Call{Call: _e.mock.On("NextFeatureId")}
}

func (_c *EntityRemote_NextFeatureId_Call) Run(run func()) *EntityRemote_NextFeatureId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_NextFeatureId_Call) Return(_a0 uint) *EntityRemote_NextFeatureId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityRemote_NextFeatureId_Call) RunAndReturn(run func() uint) *EntityRemote_NextFeatureId_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllFeatures provides a mock function with given fields:
func (_m *EntityRemote) RemoveAllFeatures() {
	_m.Called()
}

// EntityRemote_RemoveAllFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllFeatures'
type EntityRemote_RemoveAllFeatures_Call struct {
	*mock.Call
}

// RemoveAllFeatures is a helper method to define mock.On call
func (_e *EntityRemote_Expecter) RemoveAllFeatures() *EntityRemote_RemoveAllFeatures_Call {
	return &EntityRemote_RemoveAllFeatures_Call{Call: _e.mock.On("RemoveAllFeatures")}
}

func (_c *EntityRemote_RemoveAllFeatures_Call) Run(run func()) *EntityRemote_RemoveAllFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityRemote_RemoveAllFeatures_Call) Return() *EntityRemote_RemoveAllFeatures_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityRemote_RemoveAllFeatures_Call) RunAndReturn(run func()) *EntityRemote_RemoveAllFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: d
func (_m *EntityRemote) SetDescription(d *model.DescriptionType) {
	_m.Called(d)
}

// EntityRemote_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type EntityRemote_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - d *model.DescriptionType
func (_e *EntityRemote_Expecter) SetDescription(d interface{}) *EntityRemote_SetDescription_Call {
	return &EntityRemote_SetDescription_Call{Call: _e.mock.On("SetDescription", d)}
}

func (_c *EntityRemote_SetDescription_Call) Run(run func(d *model.DescriptionType)) *EntityRemote_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *EntityRemote_SetDescription_Call) Return() *EntityRemote_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityRemote_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *EntityRemote_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// NewEntityRemote creates a new instance of EntityRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntityRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntityRemote {
	mock := &EntityRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

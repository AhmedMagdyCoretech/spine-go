// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// BindingManager is an autogenerated mock type for the BindingManager type
type BindingManager struct {
	mock.Mock
}

type BindingManager_Expecter struct {
	mock *mock.Mock
}

func (_m *BindingManager) EXPECT() *BindingManager_Expecter {
	return &BindingManager_Expecter{mock: &_m.Mock}
}

// AddBinding provides a mock function with given fields: remoteDevice, data
func (_m *BindingManager) AddBinding(remoteDevice api.DeviceRemote, data model.BindingManagementRequestCallType) error {
	ret := _m.Called(remoteDevice, data)

	if len(ret) == 0 {
		panic("no return value specified for AddBinding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.DeviceRemote, model.BindingManagementRequestCallType) error); ok {
		r0 = rf(remoteDevice, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindingManager_AddBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBinding'
type BindingManager_AddBinding_Call struct {
	*mock.Call
}

// AddBinding is a helper method to define mock.On call
//   - remoteDevice api.DeviceRemote
//   - data model.BindingManagementRequestCallType
func (_e *BindingManager_Expecter) AddBinding(remoteDevice interface{}, data interface{}) *BindingManager_AddBinding_Call {
	return &BindingManager_AddBinding_Call{Call: _e.mock.On("AddBinding", remoteDevice, data)}
}

func (_c *BindingManager_AddBinding_Call) Run(run func(remoteDevice api.DeviceRemote, data model.BindingManagementRequestCallType)) *BindingManager_AddBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeviceRemote), args[1].(model.BindingManagementRequestCallType))
	})
	return _c
}

func (_c *BindingManager_AddBinding_Call) Return(_a0 error) *BindingManager_AddBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BindingManager_AddBinding_Call) RunAndReturn(run func(api.DeviceRemote, model.BindingManagementRequestCallType) error) *BindingManager_AddBinding_Call {
	_c.Call.Return(run)
	return _c
}

// Bindings provides a mock function with given fields: remoteDevice
func (_m *BindingManager) Bindings(remoteDevice api.DeviceRemote) []*api.BindingEntry {
	ret := _m.Called(remoteDevice)

	if len(ret) == 0 {
		panic("no return value specified for Bindings")
	}

	var r0 []*api.BindingEntry
	if rf, ok := ret.Get(0).(func(api.DeviceRemote) []*api.BindingEntry); ok {
		r0 = rf(remoteDevice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.BindingEntry)
		}
	}

	return r0
}

// BindingManager_Bindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bindings'
type BindingManager_Bindings_Call struct {
	*mock.Call
}

// Bindings is a helper method to define mock.On call
//   - remoteDevice api.DeviceRemote
func (_e *BindingManager_Expecter) Bindings(remoteDevice interface{}) *BindingManager_Bindings_Call {
	return &BindingManager_Bindings_Call{Call: _e.mock.On("Bindings", remoteDevice)}
}

func (_c *BindingManager_Bindings_Call) Run(run func(remoteDevice api.DeviceRemote)) *BindingManager_Bindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeviceRemote))
	})
	return _c
}

func (_c *BindingManager_Bindings_Call) Return(_a0 []*api.BindingEntry) *BindingManager_Bindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BindingManager_Bindings_Call) RunAndReturn(run func(api.DeviceRemote) []*api.BindingEntry) *BindingManager_Bindings_Call {
	_c.Call.Return(run)
	return _c
}

// BindingsOnFeature provides a mock function with given fields: featureAddress
func (_m *BindingManager) BindingsOnFeature(featureAddress model.FeatureAddressType) []*api.BindingEntry {
	ret := _m.Called(featureAddress)

	if len(ret) == 0 {
		panic("no return value specified for BindingsOnFeature")
	}

	var r0 []*api.BindingEntry
	if rf, ok := ret.Get(0).(func(model.FeatureAddressType) []*api.BindingEntry); ok {
		r0 = rf(featureAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.BindingEntry)
		}
	}

	return r0
}

// BindingManager_BindingsOnFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindingsOnFeature'
type BindingManager_BindingsOnFeature_Call struct {
	*mock.Call
}

// BindingsOnFeature is a helper method to define mock.On call
//   - featureAddress model.FeatureAddressType
func (_e *BindingManager_Expecter) BindingsOnFeature(featureAddress interface{}) *BindingManager_BindingsOnFeature_Call {
	return &BindingManager_BindingsOnFeature_Call{Call: _e.mock.On("BindingsOnFeature", featureAddress)}
}

func (_c *BindingManager_BindingsOnFeature_Call) Run(run func(featureAddress model.FeatureAddressType)) *BindingManager_BindingsOnFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FeatureAddressType))
	})
	return _c
}

func (_c *BindingManager_BindingsOnFeature_Call) Return(_a0 []*api.BindingEntry) *BindingManager_BindingsOnFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BindingManager_BindingsOnFeature_Call) RunAndReturn(run func(model.FeatureAddressType) []*api.BindingEntry) *BindingManager_BindingsOnFeature_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBinding provides a mock function with given fields: data, remoteDevice
func (_m *BindingManager) RemoveBinding(data model.BindingManagementDeleteCallType, remoteDevice api.DeviceRemote) error {
	ret := _m.Called(data, remoteDevice)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBinding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.BindingManagementDeleteCallType, api.DeviceRemote) error); ok {
		r0 = rf(data, remoteDevice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindingManager_RemoveBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBinding'
type BindingManager_RemoveBinding_Call struct {
	*mock.Call
}

// RemoveBinding is a helper method to define mock.On call
//   - data model.BindingManagementDeleteCallType
//   - remoteDevice api.DeviceRemote
func (_e *BindingManager_Expecter) RemoveBinding(data interface{}, remoteDevice interface{}) *BindingManager_RemoveBinding_Call {
	return &BindingManager_RemoveBinding_Call{Call: _e.mock.On("RemoveBinding", data, remoteDevice)}
}

func (_c *BindingManager_RemoveBinding_Call) Run(run func(data model.BindingManagementDeleteCallType, remoteDevice api.DeviceRemote)) *BindingManager_RemoveBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.BindingManagementDeleteCallType), args[1].(api.DeviceRemote))
	})
	return _c
}

func (_c *BindingManager_RemoveBinding_Call) Return(_a0 error) *BindingManager_RemoveBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BindingManager_RemoveBinding_Call) RunAndReturn(run func(model.BindingManagementDeleteCallType, api.DeviceRemote) error) *BindingManager_RemoveBinding_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBindingsForDevice provides a mock function with given fields: remoteDevice
func (_m *BindingManager) RemoveBindingsForDevice(remoteDevice api.DeviceRemote) {
	_m.Called(remoteDevice)
}

// BindingManager_RemoveBindingsForDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBindingsForDevice'
type BindingManager_RemoveBindingsForDevice_Call struct {
	*mock.Call
}

// RemoveBindingsForDevice is a helper method to define mock.On call
//   - remoteDevice api.DeviceRemote
func (_e *BindingManager_Expecter) RemoveBindingsForDevice(remoteDevice interface{}) *BindingManager_RemoveBindingsForDevice_Call {
	return &BindingManager_RemoveBindingsForDevice_Call{Call: _e.mock.On("RemoveBindingsForDevice", remoteDevice)}
}

func (_c *BindingManager_RemoveBindingsForDevice_Call) Run(run func(remoteDevice api.DeviceRemote)) *BindingManager_RemoveBindingsForDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeviceRemote))
	})
	return _c
}

func (_c *BindingManager_RemoveBindingsForDevice_Call) Return() *BindingManager_RemoveBindingsForDevice_Call {
	_c.Call.Return()
	return _c
}

func (_c *BindingManager_RemoveBindingsForDevice_Call) RunAndReturn(run func(api.DeviceRemote)) *BindingManager_RemoveBindingsForDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBindingsForEntity provides a mock function with given fields: remoteEntity
func (_m *BindingManager) RemoveBindingsForEntity(remoteEntity api.EntityRemote) {
	_m.Called(remoteEntity)
}

// BindingManager_RemoveBindingsForEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBindingsForEntity'
type BindingManager_RemoveBindingsForEntity_Call struct {
	*mock.Call
}

// RemoveBindingsForEntity is a helper method to define mock.On call
//   - remoteEntity api.EntityRemote
func (_e *BindingManager_Expecter) RemoveBindingsForEntity(remoteEntity interface{}) *BindingManager_RemoveBindingsForEntity_Call {
	return &BindingManager_RemoveBindingsForEntity_Call{Call: _e.mock.On("RemoveBindingsForEntity", remoteEntity)}
}

func (_c *BindingManager_RemoveBindingsForEntity_Call) Run(run func(remoteEntity api.EntityRemote)) *BindingManager_RemoveBindingsForEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.EntityRemote))
	})
	return _c
}

func (_c *BindingManager_RemoveBindingsForEntity_Call) Return() *BindingManager_RemoveBindingsForEntity_Call {
	_c.Call.Return()
	return _c
}

func (_c *BindingManager_RemoveBindingsForEntity_Call) RunAndReturn(run func(api.EntityRemote)) *BindingManager_RemoveBindingsForEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewBindingManager creates a new instance of BindingManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBindingManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *BindingManager {
	mock := &BindingManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

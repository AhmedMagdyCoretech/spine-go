// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "github.com/enbility/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// Device is an autogenerated mock type for the Device type
type Device struct {
	mock.Mock
}

type Device_Expecter struct {
	mock *mock.Mock
}

func (_m *Device) EXPECT() *Device_Expecter {
	return &Device_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *Device) Address() *model.AddressDeviceType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.AddressDeviceType
	if rf, ok := ret.Get(0).(func() *model.AddressDeviceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressDeviceType)
		}
	}

	return r0
}

// Device_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type Device_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *Device_Expecter) Address() *Device_Address_Call {
	return &Device_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *Device_Address_Call) Run(run func()) *Device_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Device_Address_Call) Return(_a0 *model.AddressDeviceType) *Device_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Device_Address_Call) RunAndReturn(run func() *model.AddressDeviceType) *Device_Address_Call {
	_c.Call.Return(run)
	return _c
}

// DestinationData provides a mock function with given fields:
func (_m *Device) DestinationData() model.NodeManagementDestinationDataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DestinationData")
	}

	var r0 model.NodeManagementDestinationDataType
	if rf, ok := ret.Get(0).(func() model.NodeManagementDestinationDataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.NodeManagementDestinationDataType)
	}

	return r0
}

// Device_DestinationData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestinationData'
type Device_DestinationData_Call struct {
	*mock.Call
}

// DestinationData is a helper method to define mock.On call
func (_e *Device_Expecter) DestinationData() *Device_DestinationData_Call {
	return &Device_DestinationData_Call{Call: _e.mock.On("DestinationData")}
}

func (_c *Device_DestinationData_Call) Run(run func()) *Device_DestinationData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Device_DestinationData_Call) Return(_a0 model.NodeManagementDestinationDataType) *Device_DestinationData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Device_DestinationData_Call) RunAndReturn(run func() model.NodeManagementDestinationDataType) *Device_DestinationData_Call {
	_c.Call.Return(run)
	return _c
}

// DeviceType provides a mock function with given fields:
func (_m *Device) DeviceType() *model.DeviceTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceType")
	}

	var r0 *model.DeviceTypeType
	if rf, ok := ret.Get(0).(func() *model.DeviceTypeType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceTypeType)
		}
	}

	return r0
}

// Device_DeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeviceType'
type Device_DeviceType_Call struct {
	*mock.Call
}

// DeviceType is a helper method to define mock.On call
func (_e *Device_Expecter) DeviceType() *Device_DeviceType_Call {
	return &Device_DeviceType_Call{Call: _e.mock.On("DeviceType")}
}

func (_c *Device_DeviceType_Call) Run(run func()) *Device_DeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Device_DeviceType_Call) Return(_a0 *model.DeviceTypeType) *Device_DeviceType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Device_DeviceType_Call) RunAndReturn(run func() *model.DeviceTypeType) *Device_DeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureSet provides a mock function with given fields:
func (_m *Device) FeatureSet() *model.NetworkManagementFeatureSetType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeatureSet")
	}

	var r0 *model.NetworkManagementFeatureSetType
	if rf, ok := ret.Get(0).(func() *model.NetworkManagementFeatureSetType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NetworkManagementFeatureSetType)
		}
	}

	return r0
}

// Device_FeatureSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureSet'
type Device_FeatureSet_Call struct {
	*mock.Call
}

// FeatureSet is a helper method to define mock.On call
func (_e *Device_Expecter) FeatureSet() *Device_FeatureSet_Call {
	return &Device_FeatureSet_Call{Call: _e.mock.On("FeatureSet")}
}

func (_c *Device_FeatureSet_Call) Run(run func()) *Device_FeatureSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Device_FeatureSet_Call) Return(_a0 *model.NetworkManagementFeatureSetType) *Device_FeatureSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Device_FeatureSet_Call) RunAndReturn(run func() *model.NetworkManagementFeatureSetType) *Device_FeatureSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewDevice creates a new instance of Device. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDevice(t interface {
	mock.TestingT
	Cleanup(func())
}) *Device {
	mock := &Device{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// Feature is an autogenerated mock type for the Feature type
type Feature struct {
	mock.Mock
}

type Feature_Expecter struct {
	mock *mock.Mock
}

func (_m *Feature) EXPECT() *Feature_Expecter {
	return &Feature_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *Feature) Address() *model.FeatureAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.FeatureAddressType
	if rf, ok := ret.Get(0).(func() *model.FeatureAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FeatureAddressType)
		}
	}

	return r0
}

// Feature_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type Feature_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *Feature_Expecter) Address() *Feature_Address_Call {
	return &Feature_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *Feature_Address_Call) Run(run func()) *Feature_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Address_Call) Return(_a0 *model.FeatureAddressType) *Feature_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Address_Call) RunAndReturn(run func() *model.FeatureAddressType) *Feature_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *Feature) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// Feature_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type Feature_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *Feature_Expecter) Description() *Feature_Description_Call {
	return &Feature_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *Feature_Description_Call) Run(run func()) *Feature_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Description_Call) Return(_a0 *model.DescriptionType) *Feature_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Description_Call) RunAndReturn(run func() *model.DescriptionType) *Feature_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Operations provides a mock function with given fields:
func (_m *Feature) Operations() map[model.FunctionType]api.Operations {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operations")
	}

	var r0 map[model.FunctionType]api.Operations
	if rf, ok := ret.Get(0).(func() map[model.FunctionType]api.Operations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.FunctionType]api.Operations)
		}
	}

	return r0
}

// Feature_Operations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operations'
type Feature_Operations_Call struct {
	*mock.Call
}

// Operations is a helper method to define mock.On call
func (_e *Feature_Expecter) Operations() *Feature_Operations_Call {
	return &Feature_Operations_Call{Call: _e.mock.On("Operations")}
}

func (_c *Feature_Operations_Call) Run(run func()) *Feature_Operations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Operations_Call) Return(_a0 map[model.FunctionType]api.Operations) *Feature_Operations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Operations_Call) RunAndReturn(run func() map[model.FunctionType]api.Operations) *Feature_Operations_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *Feature) Role() model.RoleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 model.RoleType
	if rf, ok := ret.Get(0).(func() model.RoleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RoleType)
	}

	return r0
}

// Feature_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type Feature_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *Feature_Expecter) Role() *Feature_Role_Call {
	return &Feature_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *Feature_Role_Call) Run(run func()) *Feature_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Role_Call) Return(_a0 model.RoleType) *Feature_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Role_Call) RunAndReturn(run func() model.RoleType) *Feature_Role_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: desc
func (_m *Feature) SetDescription(desc *model.DescriptionType) {
	_m.Called(desc)
}

// Feature_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type Feature_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - desc *model.DescriptionType
func (_e *Feature_Expecter) SetDescription(desc interface{}) *Feature_SetDescription_Call {
	return &Feature_SetDescription_Call{Call: _e.mock.On("SetDescription", desc)}
}

func (_c *Feature_SetDescription_Call) Run(run func(desc *model.DescriptionType)) *Feature_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *Feature_SetDescription_Call) Return() *Feature_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *Feature_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *Feature_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescriptionString provides a mock function with given fields: s
func (_m *Feature) SetDescriptionString(s string) {
	_m.Called(s)
}

// Feature_SetDescriptionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescriptionString'
type Feature_SetDescriptionString_Call struct {
	*mock.Call
}

// SetDescriptionString is a helper method to define mock.On call
//   - s string
func (_e *Feature_Expecter) SetDescriptionString(s interface{}) *Feature_SetDescriptionString_Call {
	return &Feature_SetDescriptionString_Call{Call: _e.mock.On("SetDescriptionString", s)}
}

func (_c *Feature_SetDescriptionString_Call) Run(run func(s string)) *Feature_SetDescriptionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Feature_SetDescriptionString_Call) Return() *Feature_SetDescriptionString_Call {
	_c.Call.Return()
	return _c
}

func (_c *Feature_SetDescriptionString_Call) RunAndReturn(run func(string)) *Feature_SetDescriptionString_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Feature) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Feature_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Feature_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Feature_Expecter) String() *Feature_String_Call {
	return &Feature_String_Call{Call: _e.mock.On("String")}
}

func (_c *Feature_String_Call) Run(run func()) *Feature_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_String_Call) Return(_a0 string) *Feature_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_String_Call) RunAndReturn(run func() string) *Feature_String_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *Feature) Type() model.FeatureTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 model.FeatureTypeType
	if rf, ok := ret.Get(0).(func() model.FeatureTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FeatureTypeType)
	}

	return r0
}

// Feature_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type Feature_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *Feature_Expecter) Type() *Feature_Type_Call {
	return &Feature_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *Feature_Type_Call) Run(run func()) *Feature_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Feature_Type_Call) Return(_a0 model.FeatureTypeType) *Feature_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Feature_Type_Call) RunAndReturn(run func() model.FeatureTypeType) *Feature_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeature creates a new instance of Feature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeature(t interface {
	mock.TestingT
	Cleanup(func())
}) *Feature {
	mock := &Feature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

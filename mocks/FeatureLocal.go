// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"

	time "time"
)

// FeatureLocal is an autogenerated mock type for the FeatureLocal type
type FeatureLocal struct {
	mock.Mock
}

type FeatureLocal_Expecter struct {
	mock *mock.Mock
}

func (_m *FeatureLocal) EXPECT() *FeatureLocal_Expecter {
	return &FeatureLocal_Expecter{mock: &_m.Mock}
}

// AddFunctionType provides a mock function with given fields: function, read, write
func (_m *FeatureLocal) AddFunctionType(function model.FunctionType, read bool, write bool) {
	_m.Called(function, read, write)
}

// FeatureLocal_AddFunctionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunctionType'
type FeatureLocal_AddFunctionType_Call struct {
	*mock.Call
}

// AddFunctionType is a helper method to define mock.On call
//   - function model.FunctionType
//   - read bool
//   - write bool
func (_e *FeatureLocal_Expecter) AddFunctionType(function interface{}, read interface{}, write interface{}) *FeatureLocal_AddFunctionType_Call {
	return &FeatureLocal_AddFunctionType_Call{Call: _e.mock.On("AddFunctionType", function, read, write)}
}

func (_c *FeatureLocal_AddFunctionType_Call) Run(run func(function model.FunctionType, read bool, write bool)) *FeatureLocal_AddFunctionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *FeatureLocal_AddFunctionType_Call) Return() *FeatureLocal_AddFunctionType_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_AddFunctionType_Call) RunAndReturn(run func(model.FunctionType, bool, bool)) *FeatureLocal_AddFunctionType_Call {
	_c.Call.Return(run)
	return _c
}

// AddResultCallback provides a mock function with given fields: msgCounterReference, function
func (_m *FeatureLocal) AddResultCallback(msgCounterReference model.MsgCounterType, function func(api.ResultMessage)) {
	_m.Called(msgCounterReference, function)
}

// FeatureLocal_AddResultCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResultCallback'
type FeatureLocal_AddResultCallback_Call struct {
	*mock.Call
}

// AddResultCallback is a helper method to define mock.On call
//   - msgCounterReference model.MsgCounterType
//   - function func(api.ResultMessage)
func (_e *FeatureLocal_Expecter) AddResultCallback(msgCounterReference interface{}, function interface{}) *FeatureLocal_AddResultCallback_Call {
	return &FeatureLocal_AddResultCallback_Call{Call: _e.mock.On("AddResultCallback", msgCounterReference, function)}
}

func (_c *FeatureLocal_AddResultCallback_Call) Run(run func(msgCounterReference model.MsgCounterType, function func(api.ResultMessage))) *FeatureLocal_AddResultCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.MsgCounterType), args[1].(func(api.ResultMessage)))
	})
	return _c
}

func (_c *FeatureLocal_AddResultCallback_Call) Return() *FeatureLocal_AddResultCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_AddResultCallback_Call) RunAndReturn(run func(model.MsgCounterType, func(api.ResultMessage))) *FeatureLocal_AddResultCallback_Call {
	_c.Call.Return(run)
	return _c
}

// AddResultHandler provides a mock function with given fields: handler
func (_m *FeatureLocal) AddResultHandler(handler api.FeatureResult) {
	_m.Called(handler)
}

// FeatureLocal_AddResultHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResultHandler'
type FeatureLocal_AddResultHandler_Call struct {
	*mock.Call
}

// AddResultHandler is a helper method to define mock.On call
//   - handler api.FeatureResult
func (_e *FeatureLocal_Expecter) AddResultHandler(handler interface{}) *FeatureLocal_AddResultHandler_Call {
	return &FeatureLocal_AddResultHandler_Call{Call: _e.mock.On("AddResultHandler", handler)}
}

func (_c *FeatureLocal_AddResultHandler_Call) Run(run func(handler api.FeatureResult)) *FeatureLocal_AddResultHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.FeatureResult))
	})
	return _c
}

func (_c *FeatureLocal_AddResultHandler_Call) Return() *FeatureLocal_AddResultHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_AddResultHandler_Call) RunAndReturn(run func(api.FeatureResult)) *FeatureLocal_AddResultHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *FeatureLocal) Address() *model.FeatureAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.FeatureAddressType
	if rf, ok := ret.Get(0).(func() *model.FeatureAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FeatureAddressType)
		}
	}

	return r0
}

// FeatureLocal_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type FeatureLocal_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Address() *FeatureLocal_Address_Call {
	return &FeatureLocal_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *FeatureLocal_Address_Call) Run(run func()) *FeatureLocal_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Address_Call) Return(_a0 *model.FeatureAddressType) *FeatureLocal_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Address_Call) RunAndReturn(run func() *model.FeatureAddressType) *FeatureLocal_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: remoteAdress
func (_m *FeatureLocal) Bind(remoteAdress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAdress)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAdress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAdress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAdress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type FeatureLocal_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - remoteAdress *model.FeatureAddressType
func (_e *FeatureLocal_Expecter) Bind(remoteAdress interface{}) *FeatureLocal_Bind_Call {
	return &FeatureLocal_Bind_Call{Call: _e.mock.On("Bind", remoteAdress)}
}

func (_c *FeatureLocal_Bind_Call) Run(run func(remoteAdress *model.FeatureAddressType)) *FeatureLocal_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *FeatureLocal_Bind_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_Bind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_Bind_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// DataCopy provides a mock function with given fields: function
func (_m *FeatureLocal) DataCopy(function model.FunctionType) interface{} {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for DataCopy")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(model.FunctionType) interface{}); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FeatureLocal_DataCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataCopy'
type FeatureLocal_DataCopy_Call struct {
	*mock.Call
}

// DataCopy is a helper method to define mock.On call
//   - function model.FunctionType
func (_e *FeatureLocal_Expecter) DataCopy(function interface{}) *FeatureLocal_DataCopy_Call {
	return &FeatureLocal_DataCopy_Call{Call: _e.mock.On("DataCopy", function)}
}

func (_c *FeatureLocal_DataCopy_Call) Run(run func(function model.FunctionType)) *FeatureLocal_DataCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType))
	})
	return _c
}

func (_c *FeatureLocal_DataCopy_Call) Return(_a0 interface{}) *FeatureLocal_DataCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_DataCopy_Call) RunAndReturn(run func(model.FunctionType) interface{}) *FeatureLocal_DataCopy_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *FeatureLocal) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// FeatureLocal_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type FeatureLocal_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Description() *FeatureLocal_Description_Call {
	return &FeatureLocal_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *FeatureLocal_Description_Call) Run(run func()) *FeatureLocal_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Description_Call) Return(_a0 *model.DescriptionType) *FeatureLocal_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Description_Call) RunAndReturn(run func() *model.DescriptionType) *FeatureLocal_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *FeatureLocal) Device() api.DeviceLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 api.DeviceLocal
	if rf, ok := ret.Get(0).(func() api.DeviceLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceLocal)
		}
	}

	return r0
}

// FeatureLocal_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type FeatureLocal_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Device() *FeatureLocal_Device_Call {
	return &FeatureLocal_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *FeatureLocal_Device_Call) Run(run func()) *FeatureLocal_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Device_Call) Return(_a0 api.DeviceLocal) *FeatureLocal_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Device_Call) RunAndReturn(run func() api.DeviceLocal) *FeatureLocal_Device_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields:
func (_m *FeatureLocal) Entity() api.EntityLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 api.EntityLocal
	if rf, ok := ret.Get(0).(func() api.EntityLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EntityLocal)
		}
	}

	return r0
}

// FeatureLocal_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type FeatureLocal_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Entity() *FeatureLocal_Entity_Call {
	return &FeatureLocal_Entity_Call{Call: _e.mock.On("Entity")}
}

func (_c *FeatureLocal_Entity_Call) Run(run func()) *FeatureLocal_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Entity_Call) Return(_a0 api.EntityLocal) *FeatureLocal_Entity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Entity_Call) RunAndReturn(run func() api.EntityLocal) *FeatureLocal_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRequestData provides a mock function with given fields: msgCounter, destination
func (_m *FeatureLocal) FetchRequestData(msgCounter model.MsgCounterType, destination api.FeatureRemote) (interface{}, *model.ErrorType) {
	ret := _m.Called(msgCounter, destination)

	if len(ret) == 0 {
		panic("no return value specified for FetchRequestData")
	}

	var r0 interface{}
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.MsgCounterType, api.FeatureRemote) (interface{}, *model.ErrorType)); ok {
		return rf(msgCounter, destination)
	}
	if rf, ok := ret.Get(0).(func(model.MsgCounterType, api.FeatureRemote) interface{}); ok {
		r0 = rf(msgCounter, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(model.MsgCounterType, api.FeatureRemote) *model.ErrorType); ok {
		r1 = rf(msgCounter, destination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_FetchRequestData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRequestData'
type FeatureLocal_FetchRequestData_Call struct {
	*mock.Call
}

// FetchRequestData is a helper method to define mock.On call
//   - msgCounter model.MsgCounterType
//   - destination api.FeatureRemote
func (_e *FeatureLocal_Expecter) FetchRequestData(msgCounter interface{}, destination interface{}) *FeatureLocal_FetchRequestData_Call {
	return &FeatureLocal_FetchRequestData_Call{Call: _e.mock.On("FetchRequestData", msgCounter, destination)}
}

func (_c *FeatureLocal_FetchRequestData_Call) Run(run func(msgCounter model.MsgCounterType, destination api.FeatureRemote)) *FeatureLocal_FetchRequestData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.MsgCounterType), args[1].(api.FeatureRemote))
	})
	return _c
}

func (_c *FeatureLocal_FetchRequestData_Call) Return(_a0 interface{}, _a1 *model.ErrorType) *FeatureLocal_FetchRequestData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_FetchRequestData_Call) RunAndReturn(run func(model.MsgCounterType, api.FeatureRemote) (interface{}, *model.ErrorType)) *FeatureLocal_FetchRequestData_Call {
	_c.Call.Return(run)
	return _c
}

// HandleMessage provides a mock function with given fields: message
func (_m *FeatureLocal) HandleMessage(message *api.Message) *model.ErrorType {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*api.Message) *model.ErrorType); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorType)
		}
	}

	return r0
}

// FeatureLocal_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type FeatureLocal_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - message *api.Message
func (_e *FeatureLocal_Expecter) HandleMessage(message interface{}) *FeatureLocal_HandleMessage_Call {
	return &FeatureLocal_HandleMessage_Call{Call: _e.mock.On("HandleMessage", message)}
}

func (_c *FeatureLocal_HandleMessage_Call) Run(run func(message *api.Message)) *FeatureLocal_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.Message))
	})
	return _c
}

func (_c *FeatureLocal_HandleMessage_Call) Return(_a0 *model.ErrorType) *FeatureLocal_HandleMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_HandleMessage_Call) RunAndReturn(run func(*api.Message) *model.ErrorType) *FeatureLocal_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Information provides a mock function with given fields:
func (_m *FeatureLocal) Information() *model.NodeManagementDetailedDiscoveryFeatureInformationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Information")
	}

	var r0 *model.NodeManagementDetailedDiscoveryFeatureInformationType
	if rf, ok := ret.Get(0).(func() *model.NodeManagementDetailedDiscoveryFeatureInformationType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NodeManagementDetailedDiscoveryFeatureInformationType)
		}
	}

	return r0
}

// FeatureLocal_Information_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Information'
type FeatureLocal_Information_Call struct {
	*mock.Call
}

// Information is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Information() *FeatureLocal_Information_Call {
	return &FeatureLocal_Information_Call{Call: _e.mock.On("Information")}
}

func (_c *FeatureLocal_Information_Call) Run(run func()) *FeatureLocal_Information_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Information_Call) Return(_a0 *model.NodeManagementDetailedDiscoveryFeatureInformationType) *FeatureLocal_Information_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Information_Call) RunAndReturn(run func() *model.NodeManagementDetailedDiscoveryFeatureInformationType) *FeatureLocal_Information_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyData provides a mock function with given fields: function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination
func (_m *FeatureLocal) NotifyData(function model.FunctionType, deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector bool, deleteElements interface{}, destination api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination)

	if len(ret) == 0 {
		panic("no return value specified for NotifyData")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, bool, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination)
	}
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, bool, interface{}, api.FeatureRemote) *model.MsgCounterType); ok {
		r0 = rf(function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FunctionType, interface{}, interface{}, bool, interface{}, api.FeatureRemote) *model.ErrorType); ok {
		r1 = rf(function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_NotifyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyData'
type FeatureLocal_NotifyData_Call struct {
	*mock.Call
}

// NotifyData is a helper method to define mock.On call
//   - function model.FunctionType
//   - deleteSelector interface{}
//   - partialSelector interface{}
//   - partialWithoutSelector bool
//   - deleteElements interface{}
//   - destination api.FeatureRemote
func (_e *FeatureLocal_Expecter) NotifyData(function interface{}, deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector interface{}, deleteElements interface{}, destination interface{}) *FeatureLocal_NotifyData_Call {
	return &FeatureLocal_NotifyData_Call{Call: _e.mock.On("NotifyData", function, deleteSelector, partialSelector, partialWithoutSelector, deleteElements, destination)}
}

func (_c *FeatureLocal_NotifyData_Call) Run(run func(function model.FunctionType, deleteSelector interface{}, partialSelector interface{}, partialWithoutSelector bool, deleteElements interface{}, destination api.FeatureRemote)) *FeatureLocal_NotifyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}), args[2].(interface{}), args[3].(bool), args[4].(interface{}), args[5].(api.FeatureRemote))
	})
	return _c
}

func (_c *FeatureLocal_NotifyData_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_NotifyData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_NotifyData_Call) RunAndReturn(run func(model.FunctionType, interface{}, interface{}, bool, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_NotifyData_Call {
	_c.Call.Return(run)
	return _c
}

// Operations provides a mock function with given fields:
func (_m *FeatureLocal) Operations() map[model.FunctionType]api.Operations {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operations")
	}

	var r0 map[model.FunctionType]api.Operations
	if rf, ok := ret.Get(0).(func() map[model.FunctionType]api.Operations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.FunctionType]api.Operations)
		}
	}

	return r0
}

// FeatureLocal_Operations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operations'
type FeatureLocal_Operations_Call struct {
	*mock.Call
}

// Operations is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Operations() *FeatureLocal_Operations_Call {
	return &FeatureLocal_Operations_Call{Call: _e.mock.On("Operations")}
}

func (_c *FeatureLocal_Operations_Call) Run(run func()) *FeatureLocal_Operations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Operations_Call) Return(_a0 map[model.FunctionType]api.Operations) *FeatureLocal_Operations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Operations_Call) RunAndReturn(run func() map[model.FunctionType]api.Operations) *FeatureLocal_Operations_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllBindings provides a mock function with given fields:
func (_m *FeatureLocal) RemoveAllBindings() {
	_m.Called()
}

// FeatureLocal_RemoveAllBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllBindings'
type FeatureLocal_RemoveAllBindings_Call struct {
	*mock.Call
}

// RemoveAllBindings is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) RemoveAllBindings() *FeatureLocal_RemoveAllBindings_Call {
	return &FeatureLocal_RemoveAllBindings_Call{Call: _e.mock.On("RemoveAllBindings")}
}

func (_c *FeatureLocal_RemoveAllBindings_Call) Run(run func()) *FeatureLocal_RemoveAllBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_RemoveAllBindings_Call) Return() *FeatureLocal_RemoveAllBindings_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_RemoveAllBindings_Call) RunAndReturn(run func()) *FeatureLocal_RemoveAllBindings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllSubscriptions provides a mock function with given fields:
func (_m *FeatureLocal) RemoveAllSubscriptions() {
	_m.Called()
}

// FeatureLocal_RemoveAllSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllSubscriptions'
type FeatureLocal_RemoveAllSubscriptions_Call struct {
	*mock.Call
}

// RemoveAllSubscriptions is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) RemoveAllSubscriptions() *FeatureLocal_RemoveAllSubscriptions_Call {
	return &FeatureLocal_RemoveAllSubscriptions_Call{Call: _e.mock.On("RemoveAllSubscriptions")}
}

func (_c *FeatureLocal_RemoveAllSubscriptions_Call) Run(run func()) *FeatureLocal_RemoveAllSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_RemoveAllSubscriptions_Call) Return() *FeatureLocal_RemoveAllSubscriptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_RemoveAllSubscriptions_Call) RunAndReturn(run func()) *FeatureLocal_RemoveAllSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBinding provides a mock function with given fields: remoteAddress
func (_m *FeatureLocal) RemoveBinding(remoteAddress *model.FeatureAddressType) {
	_m.Called(remoteAddress)
}

// FeatureLocal_RemoveBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBinding'
type FeatureLocal_RemoveBinding_Call struct {
	*mock.Call
}

// RemoveBinding is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *FeatureLocal_Expecter) RemoveBinding(remoteAddress interface{}) *FeatureLocal_RemoveBinding_Call {
	return &FeatureLocal_RemoveBinding_Call{Call: _e.mock.On("RemoveBinding", remoteAddress)}
}

func (_c *FeatureLocal_RemoveBinding_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *FeatureLocal_RemoveBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *FeatureLocal_RemoveBinding_Call) Return() *FeatureLocal_RemoveBinding_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_RemoveBinding_Call) RunAndReturn(run func(*model.FeatureAddressType)) *FeatureLocal_RemoveBinding_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSubscription provides a mock function with given fields: remoteAddress
func (_m *FeatureLocal) RemoveSubscription(remoteAddress *model.FeatureAddressType) {
	_m.Called(remoteAddress)
}

// FeatureLocal_RemoveSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSubscription'
type FeatureLocal_RemoveSubscription_Call struct {
	*mock.Call
}

// RemoveSubscription is a helper method to define mock.On call
//   - remoteAddress *model.FeatureAddressType
func (_e *FeatureLocal_Expecter) RemoveSubscription(remoteAddress interface{}) *FeatureLocal_RemoveSubscription_Call {
	return &FeatureLocal_RemoveSubscription_Call{Call: _e.mock.On("RemoveSubscription", remoteAddress)}
}

func (_c *FeatureLocal_RemoveSubscription_Call) Run(run func(remoteAddress *model.FeatureAddressType)) *FeatureLocal_RemoveSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *FeatureLocal_RemoveSubscription_Call) Return() *FeatureLocal_RemoveSubscription_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_RemoveSubscription_Call) RunAndReturn(run func(*model.FeatureAddressType)) *FeatureLocal_RemoveSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RequestData provides a mock function with given fields: function, selector, elements, destination
func (_m *FeatureLocal) RequestData(function model.FunctionType, selector interface{}, elements interface{}, destination api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(function, selector, elements, destination)

	if len(ret) == 0 {
		panic("no return value specified for RequestData")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(function, selector, elements, destination)
	}
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemote) *model.MsgCounterType); ok {
		r0 = rf(function, selector, elements, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FunctionType, interface{}, interface{}, api.FeatureRemote) *model.ErrorType); ok {
		r1 = rf(function, selector, elements, destination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_RequestData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestData'
type FeatureLocal_RequestData_Call struct {
	*mock.Call
}

// RequestData is a helper method to define mock.On call
//   - function model.FunctionType
//   - selector interface{}
//   - elements interface{}
//   - destination api.FeatureRemote
func (_e *FeatureLocal_Expecter) RequestData(function interface{}, selector interface{}, elements interface{}, destination interface{}) *FeatureLocal_RequestData_Call {
	return &FeatureLocal_RequestData_Call{Call: _e.mock.On("RequestData", function, selector, elements, destination)}
}

func (_c *FeatureLocal_RequestData_Call) Run(run func(function model.FunctionType, selector interface{}, elements interface{}, destination api.FeatureRemote)) *FeatureLocal_RequestData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}), args[2].(interface{}), args[3].(api.FeatureRemote))
	})
	return _c
}

func (_c *FeatureLocal_RequestData_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_RequestData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_RequestData_Call) RunAndReturn(run func(model.FunctionType, interface{}, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_RequestData_Call {
	_c.Call.Return(run)
	return _c
}

// RequestDataBySenderAddress provides a mock function with given fields: cmd, sender, destinationSki, destinationAddress, maxDelay
func (_m *FeatureLocal) RequestDataBySenderAddress(cmd model.CmdType, sender api.Sender, destinationSki string, destinationAddress *model.FeatureAddressType, maxDelay time.Duration) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(cmd, sender, destinationSki, destinationAddress, maxDelay)

	if len(ret) == 0 {
		panic("no return value specified for RequestDataBySenderAddress")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.CmdType, api.Sender, string, *model.FeatureAddressType, time.Duration) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	}
	if rf, ok := ret.Get(0).(func(model.CmdType, api.Sender, string, *model.FeatureAddressType, time.Duration) *model.MsgCounterType); ok {
		r0 = rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CmdType, api.Sender, string, *model.FeatureAddressType, time.Duration) *model.ErrorType); ok {
		r1 = rf(cmd, sender, destinationSki, destinationAddress, maxDelay)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_RequestDataBySenderAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestDataBySenderAddress'
type FeatureLocal_RequestDataBySenderAddress_Call struct {
	*mock.Call
}

// RequestDataBySenderAddress is a helper method to define mock.On call
//   - cmd model.CmdType
//   - sender api.Sender
//   - destinationSki string
//   - destinationAddress *model.FeatureAddressType
//   - maxDelay time.Duration
func (_e *FeatureLocal_Expecter) RequestDataBySenderAddress(cmd interface{}, sender interface{}, destinationSki interface{}, destinationAddress interface{}, maxDelay interface{}) *FeatureLocal_RequestDataBySenderAddress_Call {
	return &FeatureLocal_RequestDataBySenderAddress_Call{Call: _e.mock.On("RequestDataBySenderAddress", cmd, sender, destinationSki, destinationAddress, maxDelay)}
}

func (_c *FeatureLocal_RequestDataBySenderAddress_Call) Run(run func(cmd model.CmdType, sender api.Sender, destinationSki string, destinationAddress *model.FeatureAddressType, maxDelay time.Duration)) *FeatureLocal_RequestDataBySenderAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.CmdType), args[1].(api.Sender), args[2].(string), args[3].(*model.FeatureAddressType), args[4].(time.Duration))
	})
	return _c
}

func (_c *FeatureLocal_RequestDataBySenderAddress_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_RequestDataBySenderAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_RequestDataBySenderAddress_Call) RunAndReturn(run func(model.CmdType, api.Sender, string, *model.FeatureAddressType, time.Duration) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_RequestDataBySenderAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *FeatureLocal) Role() model.RoleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 model.RoleType
	if rf, ok := ret.Get(0).(func() model.RoleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RoleType)
	}

	return r0
}

// FeatureLocal_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type FeatureLocal_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Role() *FeatureLocal_Role_Call {
	return &FeatureLocal_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *FeatureLocal_Role_Call) Run(run func()) *FeatureLocal_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Role_Call) Return(_a0 model.RoleType) *FeatureLocal_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Role_Call) RunAndReturn(run func() model.RoleType) *FeatureLocal_Role_Call {
	_c.Call.Return(run)
	return _c
}

// SetData provides a mock function with given fields: function, data
func (_m *FeatureLocal) SetData(function model.FunctionType, data interface{}) {
	_m.Called(function, data)
}

// FeatureLocal_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type FeatureLocal_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - function model.FunctionType
//   - data interface{}
func (_e *FeatureLocal_Expecter) SetData(function interface{}, data interface{}) *FeatureLocal_SetData_Call {
	return &FeatureLocal_SetData_Call{Call: _e.mock.On("SetData", function, data)}
}

func (_c *FeatureLocal_SetData_Call) Run(run func(function model.FunctionType, data interface{})) *FeatureLocal_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}))
	})
	return _c
}

func (_c *FeatureLocal_SetData_Call) Return() *FeatureLocal_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_SetData_Call) RunAndReturn(run func(model.FunctionType, interface{})) *FeatureLocal_SetData_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: desc
func (_m *FeatureLocal) SetDescription(desc *model.DescriptionType) {
	_m.Called(desc)
}

// FeatureLocal_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type FeatureLocal_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - desc *model.DescriptionType
func (_e *FeatureLocal_Expecter) SetDescription(desc interface{}) *FeatureLocal_SetDescription_Call {
	return &FeatureLocal_SetDescription_Call{Call: _e.mock.On("SetDescription", desc)}
}

func (_c *FeatureLocal_SetDescription_Call) Run(run func(desc *model.DescriptionType)) *FeatureLocal_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *FeatureLocal_SetDescription_Call) Return() *FeatureLocal_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *FeatureLocal_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescriptionString provides a mock function with given fields: s
func (_m *FeatureLocal) SetDescriptionString(s string) {
	_m.Called(s)
}

// FeatureLocal_SetDescriptionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescriptionString'
type FeatureLocal_SetDescriptionString_Call struct {
	*mock.Call
}

// SetDescriptionString is a helper method to define mock.On call
//   - s string
func (_e *FeatureLocal_Expecter) SetDescriptionString(s interface{}) *FeatureLocal_SetDescriptionString_Call {
	return &FeatureLocal_SetDescriptionString_Call{Call: _e.mock.On("SetDescriptionString", s)}
}

func (_c *FeatureLocal_SetDescriptionString_Call) Run(run func(s string)) *FeatureLocal_SetDescriptionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeatureLocal_SetDescriptionString_Call) Return() *FeatureLocal_SetDescriptionString_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeatureLocal_SetDescriptionString_Call) RunAndReturn(run func(string)) *FeatureLocal_SetDescriptionString_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *FeatureLocal) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FeatureLocal_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type FeatureLocal_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) String() *FeatureLocal_String_Call {
	return &FeatureLocal_String_Call{Call: _e.mock.On("String")}
}

func (_c *FeatureLocal_String_Call) Run(run func()) *FeatureLocal_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_String_Call) Return(_a0 string) *FeatureLocal_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_String_Call) RunAndReturn(run func() string) *FeatureLocal_String_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: remoteAdress
func (_m *FeatureLocal) Subscribe(remoteAdress *model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(remoteAdress)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(remoteAdress)
	}
	if rf, ok := ret.Get(0).(func(*model.FeatureAddressType) *model.MsgCounterType); ok {
		r0 = rf(remoteAdress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FeatureAddressType) *model.ErrorType); ok {
		r1 = rf(remoteAdress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type FeatureLocal_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - remoteAdress *model.FeatureAddressType
func (_e *FeatureLocal_Expecter) Subscribe(remoteAdress interface{}) *FeatureLocal_Subscribe_Call {
	return &FeatureLocal_Subscribe_Call{Call: _e.mock.On("Subscribe", remoteAdress)}
}

func (_c *FeatureLocal_Subscribe_Call) Run(run func(remoteAdress *model.FeatureAddressType)) *FeatureLocal_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.FeatureAddressType))
	})
	return _c
}

func (_c *FeatureLocal_Subscribe_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_Subscribe_Call) RunAndReturn(run func(*model.FeatureAddressType) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *FeatureLocal) Type() model.FeatureTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 model.FeatureTypeType
	if rf, ok := ret.Get(0).(func() model.FeatureTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.FeatureTypeType)
	}

	return r0
}

// FeatureLocal_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type FeatureLocal_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *FeatureLocal_Expecter) Type() *FeatureLocal_Type_Call {
	return &FeatureLocal_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *FeatureLocal_Type_Call) Run(run func()) *FeatureLocal_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeatureLocal_Type_Call) Return(_a0 model.FeatureTypeType) *FeatureLocal_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeatureLocal_Type_Call) RunAndReturn(run func() model.FeatureTypeType) *FeatureLocal_Type_Call {
	_c.Call.Return(run)
	return _c
}

// WriteData provides a mock function with given fields: function, deleteSelector, partialSelector, deleteElements, destination
func (_m *FeatureLocal) WriteData(function model.FunctionType, deleteSelector interface{}, partialSelector interface{}, deleteElements interface{}, destination api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType) {
	ret := _m.Called(function, deleteSelector, partialSelector, deleteElements, destination)

	if len(ret) == 0 {
		panic("no return value specified for WriteData")
	}

	var r0 *model.MsgCounterType
	var r1 *model.ErrorType
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)); ok {
		return rf(function, deleteSelector, partialSelector, deleteElements, destination)
	}
	if rf, ok := ret.Get(0).(func(model.FunctionType, interface{}, interface{}, interface{}, api.FeatureRemote) *model.MsgCounterType); ok {
		r0 = rf(function, deleteSelector, partialSelector, deleteElements, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MsgCounterType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FunctionType, interface{}, interface{}, interface{}, api.FeatureRemote) *model.ErrorType); ok {
		r1 = rf(function, deleteSelector, partialSelector, deleteElements, destination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorType)
		}
	}

	return r0, r1
}

// FeatureLocal_WriteData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteData'
type FeatureLocal_WriteData_Call struct {
	*mock.Call
}

// WriteData is a helper method to define mock.On call
//   - function model.FunctionType
//   - deleteSelector interface{}
//   - partialSelector interface{}
//   - deleteElements interface{}
//   - destination api.FeatureRemote
func (_e *FeatureLocal_Expecter) WriteData(function interface{}, deleteSelector interface{}, partialSelector interface{}, deleteElements interface{}, destination interface{}) *FeatureLocal_WriteData_Call {
	return &FeatureLocal_WriteData_Call{Call: _e.mock.On("WriteData", function, deleteSelector, partialSelector, deleteElements, destination)}
}

func (_c *FeatureLocal_WriteData_Call) Run(run func(function model.FunctionType, deleteSelector interface{}, partialSelector interface{}, deleteElements interface{}, destination api.FeatureRemote)) *FeatureLocal_WriteData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FunctionType), args[1].(interface{}), args[2].(interface{}), args[3].(interface{}), args[4].(api.FeatureRemote))
	})
	return _c
}

func (_c *FeatureLocal_WriteData_Call) Return(_a0 *model.MsgCounterType, _a1 *model.ErrorType) *FeatureLocal_WriteData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureLocal_WriteData_Call) RunAndReturn(run func(model.FunctionType, interface{}, interface{}, interface{}, api.FeatureRemote) (*model.MsgCounterType, *model.ErrorType)) *FeatureLocal_WriteData_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeatureLocal creates a new instance of FeatureLocal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeatureLocal(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeatureLocal {
	mock := &FeatureLocal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

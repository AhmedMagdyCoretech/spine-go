// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/spine-go/api"
	mock "github.com/stretchr/testify/mock"

	model "github.com/enbility/spine-go/model"
)

// EntityLocal is an autogenerated mock type for the EntityLocal type
type EntityLocal struct {
	mock.Mock
}

type EntityLocal_Expecter struct {
	mock *mock.Mock
}

func (_m *EntityLocal) EXPECT() *EntityLocal_Expecter {
	return &EntityLocal_Expecter{mock: &_m.Mock}
}

// AddFeature provides a mock function with given fields: f
func (_m *EntityLocal) AddFeature(f api.FeatureLocal) {
	_m.Called(f)
}

// EntityLocal_AddFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeature'
type EntityLocal_AddFeature_Call struct {
	*mock.Call
}

// AddFeature is a helper method to define mock.On call
//   - f api.FeatureLocal
func (_e *EntityLocal_Expecter) AddFeature(f interface{}) *EntityLocal_AddFeature_Call {
	return &EntityLocal_AddFeature_Call{Call: _e.mock.On("AddFeature", f)}
}

func (_c *EntityLocal_AddFeature_Call) Run(run func(f api.FeatureLocal)) *EntityLocal_AddFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.FeatureLocal))
	})
	return _c
}

func (_c *EntityLocal_AddFeature_Call) Return() *EntityLocal_AddFeature_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_AddFeature_Call) RunAndReturn(run func(api.FeatureLocal)) *EntityLocal_AddFeature_Call {
	_c.Call.Return(run)
	return _c
}

// AddUseCaseSupport provides a mock function with given fields: actor, useCaseName, useCaseVersion, useCaseDocumemtSubRevision, useCaseAvailable, scenarios
func (_m *EntityLocal) AddUseCaseSupport(actor model.UseCaseActorType, useCaseName model.UseCaseNameType, useCaseVersion model.SpecificationVersionType, useCaseDocumemtSubRevision string, useCaseAvailable bool, scenarios []model.UseCaseScenarioSupportType) {
	_m.Called(actor, useCaseName, useCaseVersion, useCaseDocumemtSubRevision, useCaseAvailable, scenarios)
}

// EntityLocal_AddUseCaseSupport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUseCaseSupport'
type EntityLocal_AddUseCaseSupport_Call struct {
	*mock.Call
}

// AddUseCaseSupport is a helper method to define mock.On call
//   - actor model.UseCaseActorType
//   - useCaseName model.UseCaseNameType
//   - useCaseVersion model.SpecificationVersionType
//   - useCaseDocumemtSubRevision string
//   - useCaseAvailable bool
//   - scenarios []model.UseCaseScenarioSupportType
func (_e *EntityLocal_Expecter) AddUseCaseSupport(actor interface{}, useCaseName interface{}, useCaseVersion interface{}, useCaseDocumemtSubRevision interface{}, useCaseAvailable interface{}, scenarios interface{}) *EntityLocal_AddUseCaseSupport_Call {
	return &EntityLocal_AddUseCaseSupport_Call{Call: _e.mock.On("AddUseCaseSupport", actor, useCaseName, useCaseVersion, useCaseDocumemtSubRevision, useCaseAvailable, scenarios)}
}

func (_c *EntityLocal_AddUseCaseSupport_Call) Run(run func(actor model.UseCaseActorType, useCaseName model.UseCaseNameType, useCaseVersion model.SpecificationVersionType, useCaseDocumemtSubRevision string, useCaseAvailable bool, scenarios []model.UseCaseScenarioSupportType)) *EntityLocal_AddUseCaseSupport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UseCaseActorType), args[1].(model.UseCaseNameType), args[2].(model.SpecificationVersionType), args[3].(string), args[4].(bool), args[5].([]model.UseCaseScenarioSupportType))
	})
	return _c
}

func (_c *EntityLocal_AddUseCaseSupport_Call) Return() *EntityLocal_AddUseCaseSupport_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_AddUseCaseSupport_Call) RunAndReturn(run func(model.UseCaseActorType, model.UseCaseNameType, model.SpecificationVersionType, string, bool, []model.UseCaseScenarioSupportType)) *EntityLocal_AddUseCaseSupport_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *EntityLocal) Address() *model.EntityAddressType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 *model.EntityAddressType
	if rf, ok := ret.Get(0).(func() *model.EntityAddressType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EntityAddressType)
		}
	}

	return r0
}

// EntityLocal_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type EntityLocal_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) Address() *EntityLocal_Address_Call {
	return &EntityLocal_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *EntityLocal_Address_Call) Run(run func()) *EntityLocal_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_Address_Call) Return(_a0 *model.EntityAddressType) *EntityLocal_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Address_Call) RunAndReturn(run func() *model.EntityAddressType) *EntityLocal_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *EntityLocal) Description() *model.DescriptionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 *model.DescriptionType
	if rf, ok := ret.Get(0).(func() *model.DescriptionType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DescriptionType)
		}
	}

	return r0
}

// EntityLocal_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type EntityLocal_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) Description() *EntityLocal_Description_Call {
	return &EntityLocal_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *EntityLocal_Description_Call) Run(run func()) *EntityLocal_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_Description_Call) Return(_a0 *model.DescriptionType) *EntityLocal_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Description_Call) RunAndReturn(run func() *model.DescriptionType) *EntityLocal_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *EntityLocal) Device() api.DeviceLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 api.DeviceLocal
	if rf, ok := ret.Get(0).(func() api.DeviceLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DeviceLocal)
		}
	}

	return r0
}

// EntityLocal_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type EntityLocal_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) Device() *EntityLocal_Device_Call {
	return &EntityLocal_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *EntityLocal_Device_Call) Run(run func()) *EntityLocal_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_Device_Call) Return(_a0 api.DeviceLocal) *EntityLocal_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Device_Call) RunAndReturn(run func() api.DeviceLocal) *EntityLocal_Device_Call {
	_c.Call.Return(run)
	return _c
}

// EntityType provides a mock function with given fields:
func (_m *EntityLocal) EntityType() model.EntityTypeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EntityType")
	}

	var r0 model.EntityTypeType
	if rf, ok := ret.Get(0).(func() model.EntityTypeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.EntityTypeType)
	}

	return r0
}

// EntityLocal_EntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntityType'
type EntityLocal_EntityType_Call struct {
	*mock.Call
}

// EntityType is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) EntityType() *EntityLocal_EntityType_Call {
	return &EntityLocal_EntityType_Call{Call: _e.mock.On("EntityType")}
}

func (_c *EntityLocal_EntityType_Call) Run(run func()) *EntityLocal_EntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_EntityType_Call) Return(_a0 model.EntityTypeType) *EntityLocal_EntityType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_EntityType_Call) RunAndReturn(run func() model.EntityTypeType) *EntityLocal_EntityType_Call {
	_c.Call.Return(run)
	return _c
}

// Feature provides a mock function with given fields: addressFeature
func (_m *EntityLocal) Feature(addressFeature *model.AddressFeatureType) api.FeatureLocal {
	ret := _m.Called(addressFeature)

	if len(ret) == 0 {
		panic("no return value specified for Feature")
	}

	var r0 api.FeatureLocal
	if rf, ok := ret.Get(0).(func(*model.AddressFeatureType) api.FeatureLocal); ok {
		r0 = rf(addressFeature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureLocal)
		}
	}

	return r0
}

// EntityLocal_Feature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feature'
type EntityLocal_Feature_Call struct {
	*mock.Call
}

// Feature is a helper method to define mock.On call
//   - addressFeature *model.AddressFeatureType
func (_e *EntityLocal_Expecter) Feature(addressFeature interface{}) *EntityLocal_Feature_Call {
	return &EntityLocal_Feature_Call{Call: _e.mock.On("Feature", addressFeature)}
}

func (_c *EntityLocal_Feature_Call) Run(run func(addressFeature *model.AddressFeatureType)) *EntityLocal_Feature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.AddressFeatureType))
	})
	return _c
}

func (_c *EntityLocal_Feature_Call) Return(_a0 api.FeatureLocal) *EntityLocal_Feature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Feature_Call) RunAndReturn(run func(*model.AddressFeatureType) api.FeatureLocal) *EntityLocal_Feature_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureOfTypeAndRole provides a mock function with given fields: featureType, role
func (_m *EntityLocal) FeatureOfTypeAndRole(featureType model.FeatureTypeType, role model.RoleType) api.FeatureLocal {
	ret := _m.Called(featureType, role)

	if len(ret) == 0 {
		panic("no return value specified for FeatureOfTypeAndRole")
	}

	var r0 api.FeatureLocal
	if rf, ok := ret.Get(0).(func(model.FeatureTypeType, model.RoleType) api.FeatureLocal); ok {
		r0 = rf(featureType, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureLocal)
		}
	}

	return r0
}

// EntityLocal_FeatureOfTypeAndRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureOfTypeAndRole'
type EntityLocal_FeatureOfTypeAndRole_Call struct {
	*mock.Call
}

// FeatureOfTypeAndRole is a helper method to define mock.On call
//   - featureType model.FeatureTypeType
//   - role model.RoleType
func (_e *EntityLocal_Expecter) FeatureOfTypeAndRole(featureType interface{}, role interface{}) *EntityLocal_FeatureOfTypeAndRole_Call {
	return &EntityLocal_FeatureOfTypeAndRole_Call{Call: _e.mock.On("FeatureOfTypeAndRole", featureType, role)}
}

func (_c *EntityLocal_FeatureOfTypeAndRole_Call) Run(run func(featureType model.FeatureTypeType, role model.RoleType)) *EntityLocal_FeatureOfTypeAndRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FeatureTypeType), args[1].(model.RoleType))
	})
	return _c
}

func (_c *EntityLocal_FeatureOfTypeAndRole_Call) Return(_a0 api.FeatureLocal) *EntityLocal_FeatureOfTypeAndRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_FeatureOfTypeAndRole_Call) RunAndReturn(run func(model.FeatureTypeType, model.RoleType) api.FeatureLocal) *EntityLocal_FeatureOfTypeAndRole_Call {
	_c.Call.Return(run)
	return _c
}

// Features provides a mock function with given fields:
func (_m *EntityLocal) Features() []api.FeatureLocal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Features")
	}

	var r0 []api.FeatureLocal
	if rf, ok := ret.Get(0).(func() []api.FeatureLocal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.FeatureLocal)
		}
	}

	return r0
}

// EntityLocal_Features_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Features'
type EntityLocal_Features_Call struct {
	*mock.Call
}

// Features is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) Features() *EntityLocal_Features_Call {
	return &EntityLocal_Features_Call{Call: _e.mock.On("Features")}
}

func (_c *EntityLocal_Features_Call) Run(run func()) *EntityLocal_Features_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_Features_Call) Return(_a0 []api.FeatureLocal) *EntityLocal_Features_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Features_Call) RunAndReturn(run func() []api.FeatureLocal) *EntityLocal_Features_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrAddFeature provides a mock function with given fields: featureType, role
func (_m *EntityLocal) GetOrAddFeature(featureType model.FeatureTypeType, role model.RoleType) api.FeatureLocal {
	ret := _m.Called(featureType, role)

	if len(ret) == 0 {
		panic("no return value specified for GetOrAddFeature")
	}

	var r0 api.FeatureLocal
	if rf, ok := ret.Get(0).(func(model.FeatureTypeType, model.RoleType) api.FeatureLocal); ok {
		r0 = rf(featureType, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FeatureLocal)
		}
	}

	return r0
}

// EntityLocal_GetOrAddFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrAddFeature'
type EntityLocal_GetOrAddFeature_Call struct {
	*mock.Call
}

// GetOrAddFeature is a helper method to define mock.On call
//   - featureType model.FeatureTypeType
//   - role model.RoleType
func (_e *EntityLocal_Expecter) GetOrAddFeature(featureType interface{}, role interface{}) *EntityLocal_GetOrAddFeature_Call {
	return &EntityLocal_GetOrAddFeature_Call{Call: _e.mock.On("GetOrAddFeature", featureType, role)}
}

func (_c *EntityLocal_GetOrAddFeature_Call) Run(run func(featureType model.FeatureTypeType, role model.RoleType)) *EntityLocal_GetOrAddFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FeatureTypeType), args[1].(model.RoleType))
	})
	return _c
}

func (_c *EntityLocal_GetOrAddFeature_Call) Return(_a0 api.FeatureLocal) *EntityLocal_GetOrAddFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_GetOrAddFeature_Call) RunAndReturn(run func(model.FeatureTypeType, model.RoleType) api.FeatureLocal) *EntityLocal_GetOrAddFeature_Call {
	_c.Call.Return(run)
	return _c
}

// Information provides a mock function with given fields:
func (_m *EntityLocal) Information() *model.NodeManagementDetailedDiscoveryEntityInformationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Information")
	}

	var r0 *model.NodeManagementDetailedDiscoveryEntityInformationType
	if rf, ok := ret.Get(0).(func() *model.NodeManagementDetailedDiscoveryEntityInformationType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NodeManagementDetailedDiscoveryEntityInformationType)
		}
	}

	return r0
}

// EntityLocal_Information_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Information'
type EntityLocal_Information_Call struct {
	*mock.Call
}

// Information is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) Information() *EntityLocal_Information_Call {
	return &EntityLocal_Information_Call{Call: _e.mock.On("Information")}
}

func (_c *EntityLocal_Information_Call) Run(run func()) *EntityLocal_Information_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_Information_Call) Return(_a0 *model.NodeManagementDetailedDiscoveryEntityInformationType) *EntityLocal_Information_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_Information_Call) RunAndReturn(run func() *model.NodeManagementDetailedDiscoveryEntityInformationType) *EntityLocal_Information_Call {
	_c.Call.Return(run)
	return _c
}

// NextFeatureId provides a mock function with given fields:
func (_m *EntityLocal) NextFeatureId() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextFeatureId")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// EntityLocal_NextFeatureId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextFeatureId'
type EntityLocal_NextFeatureId_Call struct {
	*mock.Call
}

// NextFeatureId is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) NextFeatureId() *EntityLocal_NextFeatureId_Call {
	return &EntityLocal_NextFeatureId_Call{Call: _e.mock.On("NextFeatureId")}
}

func (_c *EntityLocal_NextFeatureId_Call) Run(run func()) *EntityLocal_NextFeatureId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_NextFeatureId_Call) Return(_a0 uint) *EntityLocal_NextFeatureId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntityLocal_NextFeatureId_Call) RunAndReturn(run func() uint) *EntityLocal_NextFeatureId_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllBindings provides a mock function with given fields:
func (_m *EntityLocal) RemoveAllBindings() {
	_m.Called()
}

// EntityLocal_RemoveAllBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllBindings'
type EntityLocal_RemoveAllBindings_Call struct {
	*mock.Call
}

// RemoveAllBindings is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) RemoveAllBindings() *EntityLocal_RemoveAllBindings_Call {
	return &EntityLocal_RemoveAllBindings_Call{Call: _e.mock.On("RemoveAllBindings")}
}

func (_c *EntityLocal_RemoveAllBindings_Call) Run(run func()) *EntityLocal_RemoveAllBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_RemoveAllBindings_Call) Return() *EntityLocal_RemoveAllBindings_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_RemoveAllBindings_Call) RunAndReturn(run func()) *EntityLocal_RemoveAllBindings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllSubscriptions provides a mock function with given fields:
func (_m *EntityLocal) RemoveAllSubscriptions() {
	_m.Called()
}

// EntityLocal_RemoveAllSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllSubscriptions'
type EntityLocal_RemoveAllSubscriptions_Call struct {
	*mock.Call
}

// RemoveAllSubscriptions is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) RemoveAllSubscriptions() *EntityLocal_RemoveAllSubscriptions_Call {
	return &EntityLocal_RemoveAllSubscriptions_Call{Call: _e.mock.On("RemoveAllSubscriptions")}
}

func (_c *EntityLocal_RemoveAllSubscriptions_Call) Run(run func()) *EntityLocal_RemoveAllSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_RemoveAllSubscriptions_Call) Return() *EntityLocal_RemoveAllSubscriptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_RemoveAllSubscriptions_Call) RunAndReturn(run func()) *EntityLocal_RemoveAllSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllUseCaseSupports provides a mock function with given fields:
func (_m *EntityLocal) RemoveAllUseCaseSupports() {
	_m.Called()
}

// EntityLocal_RemoveAllUseCaseSupports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllUseCaseSupports'
type EntityLocal_RemoveAllUseCaseSupports_Call struct {
	*mock.Call
}

// RemoveAllUseCaseSupports is a helper method to define mock.On call
func (_e *EntityLocal_Expecter) RemoveAllUseCaseSupports() *EntityLocal_RemoveAllUseCaseSupports_Call {
	return &EntityLocal_RemoveAllUseCaseSupports_Call{Call: _e.mock.On("RemoveAllUseCaseSupports")}
}

func (_c *EntityLocal_RemoveAllUseCaseSupports_Call) Run(run func()) *EntityLocal_RemoveAllUseCaseSupports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntityLocal_RemoveAllUseCaseSupports_Call) Return() *EntityLocal_RemoveAllUseCaseSupports_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_RemoveAllUseCaseSupports_Call) RunAndReturn(run func()) *EntityLocal_RemoveAllUseCaseSupports_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUseCaseSupport provides a mock function with given fields: actor, useCaseName
func (_m *EntityLocal) RemoveUseCaseSupport(actor model.UseCaseActorType, useCaseName model.UseCaseNameType) {
	_m.Called(actor, useCaseName)
}

// EntityLocal_RemoveUseCaseSupport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUseCaseSupport'
type EntityLocal_RemoveUseCaseSupport_Call struct {
	*mock.Call
}

// RemoveUseCaseSupport is a helper method to define mock.On call
//   - actor model.UseCaseActorType
//   - useCaseName model.UseCaseNameType
func (_e *EntityLocal_Expecter) RemoveUseCaseSupport(actor interface{}, useCaseName interface{}) *EntityLocal_RemoveUseCaseSupport_Call {
	return &EntityLocal_RemoveUseCaseSupport_Call{Call: _e.mock.On("RemoveUseCaseSupport", actor, useCaseName)}
}

func (_c *EntityLocal_RemoveUseCaseSupport_Call) Run(run func(actor model.UseCaseActorType, useCaseName model.UseCaseNameType)) *EntityLocal_RemoveUseCaseSupport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UseCaseActorType), args[1].(model.UseCaseNameType))
	})
	return _c
}

func (_c *EntityLocal_RemoveUseCaseSupport_Call) Return() *EntityLocal_RemoveUseCaseSupport_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_RemoveUseCaseSupport_Call) RunAndReturn(run func(model.UseCaseActorType, model.UseCaseNameType)) *EntityLocal_RemoveUseCaseSupport_Call {
	_c.Call.Return(run)
	return _c
}

// SetDescription provides a mock function with given fields: d
func (_m *EntityLocal) SetDescription(d *model.DescriptionType) {
	_m.Called(d)
}

// EntityLocal_SetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDescription'
type EntityLocal_SetDescription_Call struct {
	*mock.Call
}

// SetDescription is a helper method to define mock.On call
//   - d *model.DescriptionType
func (_e *EntityLocal_Expecter) SetDescription(d interface{}) *EntityLocal_SetDescription_Call {
	return &EntityLocal_SetDescription_Call{Call: _e.mock.On("SetDescription", d)}
}

func (_c *EntityLocal_SetDescription_Call) Run(run func(d *model.DescriptionType)) *EntityLocal_SetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.DescriptionType))
	})
	return _c
}

func (_c *EntityLocal_SetDescription_Call) Return() *EntityLocal_SetDescription_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntityLocal_SetDescription_Call) RunAndReturn(run func(*model.DescriptionType)) *EntityLocal_SetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// NewEntityLocal creates a new instance of EntityLocal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntityLocal(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntityLocal {
	mock := &EntityLocal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
